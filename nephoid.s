;
; File generated by cc65 v 2.16 - Git 035baa4
;
	.fopt		compiler,"cc65 v 2.16 - Git 035baa4"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMIFlag
	.export		_index
	.export		_x
	.export		_y
	.export		_inputStatus
	.export		_TEXT
	.export		_PALETTE
	.export		_Attrib_Table
	.export		_SPRITE_TABLE
	.export		_writeBallToPPU
	.export		_frameRoutine
	.export		_readInput
	.export		_writeBackgroundToPPU
	.export		_turnScreenOff
	.export		_turnScreenOn
	.export		_loadPalette
	.export		_resetScrollRegister
	.export		_waitVBlank
	.export		_main

.segment	"RODATA"

_TEXT:
	.byte	$4E,$45,$50,$48,$4F,$49,$44,$00
_PALETTE:
	.byte	$30
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$30
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$30
	.byte	$17
	.byte	$27
	.byte	$28
_Attrib_Table:
	.byte	$44
	.byte	$BB
	.byte	$44
	.byte	$BB

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"OAM"
.segment	"ZEROPAGE"
_NMIFlag:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_x:
	.res	1,$00
.segment	"ZEROPAGE"
_y:
	.res	1,$00
.segment	"ZEROPAGE"
_inputStatus:
	.res	1,$00
.segment	"OAM"
_SPRITE_TABLE:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ writeBallToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBallToPPU: near

.segment	"CODE"

;
; SPRITE_TABLE[0] = y;
;
	lda     _y
	sta     _SPRITE_TABLE
;
; SPRITE_TABLE[1] = 0;
;
	lda     #$00
	sta     _SPRITE_TABLE+1
;
; SPRITE_TABLE[2] = 11;
;
	lda     #$0B
	sta     _SPRITE_TABLE+2
;
; SPRITE_TABLE[3] = x;
;
	lda     _x
	sta     _SPRITE_TABLE+3
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ frameRoutine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_frameRoutine: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; OAM_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2003
;
; OAM_DMA_REGISTER = 2;
;
	lda     #$02
	sta     $4014
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; inputStatus = 0;
;
	lda     #$00
	sta     _inputStatus
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ readInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readInput: near

.segment	"CODE"

;
; JOYPAD1_REGISTER = 1;
;
	lda     #$01
	sta     $4016
;
; JOYPAD1_REGISTER = 0;
;
	lda     #$00
	sta     $4016
;
; for (index = 8; index > 0; --index)
;
	lda     #$08
	sta     _index
L00EE:	lda     _index
	beq     L0053
;
; inputStatus = inputStatus | (JOYPAD1_REGISTER << index-1);
;
	sec
	sbc     #$01
	tay
	lda     $4016
L00EF:	asl     a
	dey
	bpl     L00EF
	ror     a
	ora     _inputStatus
	sta     _inputStatus
;
; for (index = 8; index > 0; --index)
;
	dec     _index
	jmp     L00EE
;
; }
;
L0053:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ writeBackgroundToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBackgroundToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; PPU_ADDRESS_REGISTER= 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x20;
;
	sta     $2006
;
; for(index = 0; index < sizeof(TEXT); ++index)
;
	lda     #$00
	sta     _index
L00F0:	lda     _index
	cmp     #$08
	bcs     L00F1
;
; PPU_DATA_REGISTER = TEXT[index];
;
	ldy     _index
	lda     _TEXT,y
	sta     $2007
;
; for(index = 0; index < sizeof(TEXT); ++index)
;
	inc     _index
	jmp     L00F0
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L00F1:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x80;
;
	lda     #$80
	sta     $2006
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	lda     #$00
	sta     _index
L00F2:	lda     _index
	cmp     #$08
	bcs     L0087
;
; PPU_DATA_REGISTER = TEXT[index];
;
	ldy     _index
	lda     _TEXT,y
	sta     $2007
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	inc     _index
	jmp     L00F2
;
; resetScrollRegister();
;
L0087:	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOff: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK_REGISTER = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOn: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0x90;
;
	lda     #$90
	sta     $2000
;
; PPU_MASK_REGISTER = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER= 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x00;
;
	lda     #$00
	sta     $2006
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L00F3:	lda     _index
	cmp     #$10
	bcs     L00F4
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L00F3
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
L00F4:	lda     #$00
	sta     _index
L00F5:	lda     _index
	cmp     #$10
	bcs     L00F6
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L00F5
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L00F6:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0xda;
;
	lda     #$DA
	sta     $2006
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	lda     #$00
	sta     _index
L00F7:	lda     _index
	cmp     #$04
	bcs     L00CD
;
; PPU_DATA_REGISTER = Attrib_Table[index];
;
	ldy     _index
	lda     _Attrib_Table,y
	sta     $2007
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	inc     _index
	jmp     L00F7
;
; }
;
L00CD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ resetScrollRegister (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetScrollRegister: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER= 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0;
;
	sta     $2006
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitVBlank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitVBlank: near

.segment	"CODE"

;
; while (NMIFlag == 0);
;
L00F8:	lda     _NMIFlag
	beq     L00F8
;
; NMIFlag = 0;
;
	lda     #$00
	sta     _NMIFlag
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; x = 0x25;
;
	lda     #$25
	sta     _x
;
; y = 0x25;
;
	sta     _y
;
; loadPalette();
;
	jsr     _loadPalette
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; frameRoutine();
;
L0023:	jsr     _frameRoutine
;
; readInput();
;
	jsr     _readInput
;
; if ((inputStatus & JP1_UP) != 0) --y;
;
	lda     _inputStatus
	and     #$08
	beq     L00F9
	dec     _y
;
; if ((inputStatus & JP1_DOWN) != 0) ++y;
;
L00F9:	lda     _inputStatus
	and     #$04
	beq     L00FA
	inc     _y
;
; if ((inputStatus & JP1_LEFT) != 0) --x;
;
L00FA:	lda     _inputStatus
	and     #$02
	beq     L00FB
	dec     _x
;
; if ((inputStatus & JP1_RIGHT) != 0) ++x;
;
L00FB:	lda     _inputStatus
	and     #$01
	beq     L0038
	inc     _x
;
; writeBallToPPU();
;
L0038:	jsr     _writeBallToPPU
;
; while (1)
;
	jmp     L0023

.endproc

