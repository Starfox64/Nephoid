;
; File generated by cc65 v 2.16 - Git 035baa4
;
	.fopt		compiler,"cc65 v 2.16 - Git 035baa4"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMIFlag
	.export		_FrameCounter
	.export		_index
	.export		_spriteIndex
	.export		_spriteX
	.export		_spriteY
	.export		_xPaddle
	.export		_yPaddle
	.export		_dirPaddle
	.export		_speedPaddle
	.export		_xBall
	.export		_yBall
	.export		_dirBall
	.export		_speedBall
	.export		_inputStatus
	.export		_launched
	.export		_paused
	.export		_pauseTransition
	.export		_TEXT
	.export		_PAUSE_TEXT
	.export		_PADDLE
	.export		_LEVEL1_X
	.export		_LEVEL1_Y
	.export		_LEVEL1_DESTROYED
	.export		_PALETTE
	.export		_Attrib_Table
	.export		_SPRITE_TABLE
	.export		_updatePos
	.export		_inputListener
	.export		_spriteCollision
	.export		_frameRoutine
	.export		_readInput
	.export		_writeBackgroundToPPU
	.export		_writeSpritesToPPU
	.export		_turnScreenOff
	.export		_turnScreenOn
	.export		_loadPalette
	.export		_resetScrollRegister
	.export		_waitVBlank
	.export		_main

.segment	"DATA"

_xPaddle:
	.byte	$00
_yPaddle:
	.byte	$B0
_dirPaddle:
	.byte	$03
_speedPaddle:
	.byte	$02
_xBall:
	.byte	$0C
_yBall:
	.byte	$A8
_dirBall:
	.byte	$03
_speedBall:
	.byte	$02
_launched:
	.byte	$01
_paused:
	.byte	$01
_pauseTransition:
	.byte	$01
_LEVEL1_DESTROYED:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01

.segment	"RODATA"

_TEXT:
	.byte	$4E,$45,$50,$48,$4F,$49,$44,$00
_PAUSE_TEXT:
	.byte	$50,$41,$55,$53,$45,$44,$00
_PADDLE:
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
_LEVEL1_X:
	.byte	$08
	.byte	$18
	.byte	$28
	.byte	$38
	.byte	$48
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$34
	.byte	$44
	.byte	$54
	.byte	$08
	.byte	$18
	.byte	$28
	.byte	$38
	.byte	$48
_LEVEL1_Y:
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$18
_PALETTE:
	.byte	$30
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$30
	.byte	$01
	.byte	$21
	.byte	$3C
	.byte	$30
	.byte	$17
	.byte	$27
	.byte	$28
_Attrib_Table:
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$FF
	.byte	$FF
	.byte	$55
	.byte	$FF

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"OAM"
.segment	"ZEROPAGE"
_NMIFlag:
	.res	1,$00
.segment	"ZEROPAGE"
_FrameCounter:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_spriteIndex:
	.res	1,$00
.segment	"ZEROPAGE"
_spriteX:
	.res	1,$00
.segment	"ZEROPAGE"
_spriteY:
	.res	1,$00
.segment	"ZEROPAGE"
_inputStatus:
	.res	1,$00
.segment	"OAM"
_SPRITE_TABLE:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ updatePos (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePos: near

.segment	"CODE"

;
; if (dirPaddle == E && xPaddle < 223) {
;
	lda     _dirPaddle
	cmp     #$03
	bne     L0282
	lda     _xPaddle
	cmp     #$DF
	bcs     L0282
;
; xPaddle += speedPaddle;
;
	lda     _speedPaddle
	clc
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall += speedPaddle;
;
	lda     _launched
	cmp     #$01
	bne     L0285
	lda     _speedPaddle
	clc
;
; else if (dirPaddle == W && xPaddle > 0) {
;
	jmp     L028A
L0282:	lda     _dirPaddle
	cmp     #$07
	bne     L0285
	lda     _xPaddle
	beq     L0285
;
; xPaddle -= speedPaddle;
;
	lda     _speedPaddle
	eor     #$FF
	sec
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall -= speedPaddle;
;
	lda     _launched
	cmp     #$01
	bne     L0285
	lda     _speedPaddle
	eor     #$FF
	sec
L028A:	adc     _xBall
	sta     _xBall
;
; if (launched == TRUE) {
;
L0285:	lda     _launched
	bne     L00FD
;
; switch (dirBall) {
;
	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L0286
	cmp     #$04
	beq     L0287
	cmp     #$06
	beq     L0288
	cmp     #$08
	beq     L0289
	rts
;
; xBall += speedBall;
;
L0286:	lda     _speedBall
	clc
;
; break;
;
	jmp     L0290
;
; xBall += speedBall;
;
L0287:	lda     _speedBall
	clc
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L028B
;
; xBall -= speedBall;
;
L0288:	lda     _speedBall
	eor     #$FF
	sec
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L028B
;
; xBall -= speedBall;
;
L0289:	lda     _speedBall
	eor     #$FF
	sec
L0290:	adc     _xBall
	sta     _xBall
;
; yBall -= speedBall;
;
	lda     _speedBall
	eor     #$FF
	sec
L028B:	adc     _yBall
	sta     _yBall
;
; }
;
L00FD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ inputListener (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inputListener: near

.segment	"CODE"

;
; readInput();
;
	jsr     _readInput
;
; if ((inputStatus & JP1_START) != 0
;
	lda     _inputStatus
	and     #$10
;
; && pauseTransition == FALSE)
;
	beq     L0298
	lda     _pauseTransition
	cmp     #$01
	bne     L0298
;
; paused = (paused == TRUE)?FALSE:TRUE;
;
	lda     _paused
	bne     L0296
	lda     #$01
	jmp     L0297
L0296:	lda     #$00
L0297:	sta     _paused
;
; pauseTransition = TRUE;
;
	lda     #$00
	sta     _pauseTransition
;
; FrameCounter = 0;
;
	sta     _FrameCounter
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; if (paused == FALSE)
;
L0298:	lda     _paused
	cmp     #$01
	bne     L00DB
;
; if ((inputStatus & JP1_LEFT) != 0)
;
	lda     _inputStatus
	and     #$02
	beq     L0299
;
; dirPaddle = W;
;
	lda     #$07
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NW;
;
	lda     _launched
	cmp     #$01
	bne     L029C
	lda     #$08
	sta     _dirBall
;
; else if ((inputStatus & JP1_RIGHT) != 0) //255-size of paddle
;
	jmp     L029C
L0299:	lda     _inputStatus
	and     #$01
	beq     L029B
;
; dirPaddle = E;
;
	lda     #$03
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NE;
;
	lda     _launched
	cmp     #$01
	bne     L029C
	lda     #$02
	sta     _dirBall
;
; else dirPaddle = NESW;
;
	jmp     L029C
L029B:	sta     _dirPaddle
;
; if ((inputStatus & JP1_A) != 0 && launched == FALSE)
;
L029C:	lda     _inputStatus
	and     #$80
	beq     L029E
	lda     _launched
	cmp     #$01
	beq     L02A1
L029E:	rts
;
; launched = TRUE;
;
L02A1:	lda     #$00
	sta     _launched
;
; }
;
L00DB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spriteCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCollision: near

.segment	"CODE"

;
; if (xPaddle + 4 * 8 >= xBall && xPaddle <= xBall + 8
;
	ldx     #$00
	lda     _xPaddle
	clc
	adc     #$20
	bcc     L0119
	inx
L0119:	cmp     _xBall
	txa
	sbc     #$00
	bcc     L02AA
	lda     _xPaddle
	jsr     pusha0
	lda     _xBall
;
; && yPaddle <= yBall + 8 &&  yPaddle + 8 >= yBall)
;
	clc
	adc     #$08
	bcc     L011B
	ldx     #$01
L011B:	jsr     tosicmp
	beq     L02A4
	bcs     L02AA
L02A4:	lda     _yPaddle
	jsr     pusha0
	lda     _yBall
	clc
	adc     #$08
	bcc     L011C
	ldx     #$01
L011C:	jsr     tosicmp
	beq     L02A5
	bcs     L02AA
L02A5:	ldx     #$00
	lda     _yPaddle
	clc
	adc     #$08
	bcc     L011D
	inx
L011D:	cmp     _yBall
	txa
	sbc     #$00
	bcc     L02AA
;
; if (dirBall == SE) dirBall = NE;
;
	lda     _dirBall
	cmp     #$04
	bne     L02A9
	lda     #$02
;
; else dirBall = NW;
;
	jmp     L02A2
L02A9:	lda     #$08
L02A2:	sta     _dirBall
;
; switch (dirBall) {
;
L02AA:	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L02AB
	cmp     #$04
	beq     L02B1
	cmp     #$06
	beq     L02B7
	cmp     #$08
	beq     L02BC
	rts
;
; if (xBall >= BALL_MAX_X && yBall <= 0) dirBall = SW;
;
L02AB:	lda     _xBall
	cmp     #$F7
	bcc     L02AF
	lda     _yBall
	bne     L02AF
	lda     #$06
;
; else if (yBall <= 0) dirBall = SE;
;
	jmp     L02A3
L02AF:	lda     _yBall
	bne     L02B0
	lda     #$04
;
; else if (xBall >= BALL_MAX_X) dirBall = NW;
;
	jmp     L02A3
L02B0:	lda     _xBall
	cmp     #$F7
	bcc     L0128
	lda     #$08
;
; break;
;
	jmp     L02A3
;
; if (xBall >= BALL_MAX_X && yBall >= BALL_MAX_Y) dirBall = NW;
;
L02B1:	lda     _xBall
	cmp     #$F7
	bcc     L02B5
	lda     _yBall
	cmp     #$E6
	bcc     L02B5
	lda     #$08
;
; else if (yBall >= BALL_MAX_Y) dirBall = NE;
;
	jmp     L02A3
L02B5:	lda     _yBall
	cmp     #$E6
;
; else if (xBall >= BALL_MAX_X) dirBall = SW;
;
	bcs     L02C1
	lda     _xBall
	cmp     #$F7
	bcc     L0128
	lda     #$06
;
; break;
;
	jmp     L02A3
;
; if (xBall <= 0 && yBall >= BALL_MAX_Y) dirBall = NE;
;
L02B7:	lda     _xBall
	bne     L02BA
	lda     _yBall
	cmp     #$E6
	bcs     L02C1
;
; else if (yBall >= BALL_MAX_Y) dirBall = NW;
;
L02BA:	lda     _yBall
	cmp     #$E6
	bcc     L02BB
	lda     #$08
;
; else if (xBall <= 0) dirBall = SE;
;
	jmp     L02A3
L02BB:	lda     _xBall
	bne     L0128
	lda     #$04
;
; break;
;
	jmp     L02A3
;
; if (xBall <= 0 && yBall <= 0) dirBall = SE;
;
L02BC:	lda     _xBall
	bne     L02BF
	lda     _yBall
	bne     L02BF
	lda     #$04
;
; else if (yBall <= 0) dirBall = SW;
;
	jmp     L02A3
L02BF:	lda     _yBall
	bne     L02C0
	lda     #$06
;
; else if (xBall <= 0) dirBall = NE;
;
	jmp     L02A3
L02C0:	lda     _xBall
	bne     L0128
L02C1:	lda     #$02
L02A3:	sta     _dirBall
;
; }
;
L0128:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ frameRoutine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_frameRoutine: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; OAM_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2003
;
; OAM_DMA_REGISTER = 2;
;
	lda     #$02
	sta     $4014
;
; resetScrollRegister();
;
	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ readInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readInput: near

.segment	"CODE"

;
; unsigned char test = 0;//TO DELETE
;
	lda     #$00
	jsr     pusha
;
; unsigned char address = 0;//TO DELETE
;
	jsr     pusha
;
; inputStatus = 0;
;
	sta     _inputStatus
;
; JOYPAD1_REGISTER = 1;
;
	lda     #$01
	sta     $4016
;
; JOYPAD1_REGISTER = 0;
;
	lda     #$00
	sta     $4016
;
; for (index = 8; index > 0; --index)
;
	lda     #$08
	sta     _index
L02C2:	lda     _index
	beq     L01BB
;
; test = (JOYPAD1_REGISTER & 1);
;
	lda     $4016
	and     #$01
	ldy     #$01
	sta     (sp),y
;
; PPU_ADDRESS_REGISTER= 0x20;//TO DELETE
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x30 + address;//TO DELETE
;
	dey
	lda     (sp),y
	clc
	adc     #$30
	sta     $2006
;
; PPU_DATA_REGISTER = test + '0';//TO DELETE
;
	iny
	lda     (sp),y
	clc
	adc     #$30
	sta     $2007
;
; inputStatus = inputStatus | (test << index-1);
;
	lda     (sp),y
	sta     ptr1
	lda     _index
	sec
	sbc     #$01
	tay
	lda     ptr1
L02C3:	asl     a
	dey
	bpl     L02C3
	ror     a
	ora     _inputStatus
	sta     _inputStatus
;
; ++address;//TO DELETE
;
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; for (index = 8; index > 0; --index)
;
	dec     _index
	jmp     L02C2
;
; resetScrollRegister();//TO DELETE
;
L01BB:	jsr     _resetScrollRegister
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ writeBackgroundToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBackgroundToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; PPU_ADDRESS_REGISTER= 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x20;
;
	sta     $2006
;
; for(index = 0; index < sizeof(TEXT); ++index)
;
	lda     #$00
	sta     _index
L02C5:	lda     _index
	cmp     #$08
	bcs     L02C6
;
; PPU_DATA_REGISTER = TEXT[index];
;
	ldy     _index
	lda     _TEXT,y
	sta     $2007
;
; for(index = 0; index < sizeof(TEXT); ++index)
;
	inc     _index
	jmp     L02C5
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L02C6:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x80;
;
	lda     #$80
	sta     $2006
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	lda     #$00
	sta     _index
L02C7:	lda     _index
	cmp     #$08
	bcs     L02C8
;
; PPU_DATA_REGISTER = TEXT[index];
;
	ldy     _index
	lda     _TEXT,y
	sta     $2007
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	inc     _index
	jmp     L02C7
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L02C8:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x90;
;
	lda     #$90
	sta     $2006
;
; for (index = 0; index < sizeof(PAUSE_TEXT); ++index)
;
	lda     #$00
	sta     _index
L02C9:	lda     _index
	cmp     #$07
	bcs     L0211
;
; if (paused == FALSE) PPU_DATA_REGISTER = 0;
;
	lda     _paused
	cmp     #$01
	bne     L0219
	lda     #$00
;
; else PPU_DATA_REGISTER = PAUSE_TEXT[index];
;
	jmp     L02C4
L0219:	ldy     _index
	lda     _PAUSE_TEXT,y
L02C4:	sta     $2007
;
; for (index = 0; index < sizeof(PAUSE_TEXT); ++index)
;
	inc     _index
	jmp     L02C9
;
; resetScrollRegister();
;
L0211:	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ writeSpritesToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeSpritesToPPU: near

.segment	"CODE"

;
; spriteIndex = 0;
;
	lda     #$00
	sta     _spriteIndex
;
; for (index = 0; index < sizeof(PADDLE); ++index)
;
	sta     _index
L02CB:	lda     _index
	cmp     #$04
	bcs     L0175
;
; SPRITE_TABLE[spriteIndex] = yPaddle;
;
	ldy     _spriteIndex
	lda     _yPaddle
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = PADDLE[index];
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _spriteIndex
	bcc     L0184
	inx
L0184:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _PADDLE,y
	ldy     #$00
	sta     (ptr1),y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = 1 + ((index==3)?SPRITE_VERTICAL_FLIP:0);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _spriteIndex
	bcc     L018B
	inx
L018B:	sta     ptr1
	stx     ptr1+1
	lda     _index
	cmp     #$03
	bne     L02CC
	lda     #$40
	jmp     L0191
L02CC:	tya
L0191:	clc
	adc     #$01
	sta     (ptr1),y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = xPaddle + (index << 3);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _spriteIndex
	bcc     L0197
	inx
L0197:	sta     ptr1
	stx     ptr1+1
	lda     _index
	asl     a
	asl     a
	asl     a
	clc
	adc     _xPaddle
	sta     (ptr1),y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; for (index = 0; index < sizeof(PADDLE); ++index)
;
	inc     _index
	jmp     L02CB
;
; SPRITE_TABLE[spriteIndex] = yBall;
;
L0175:	ldy     _spriteIndex
	lda     _yBall
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = 0;
;
	ldy     _spriteIndex
	lda     #$00
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = 3;
;
	ldy     _spriteIndex
	lda     #$03
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = xBall;
;
	ldy     _spriteIndex
	lda     _xBall
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOff: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK_REGISTER = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOn: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0x90;
;
	lda     #$90
	sta     $2000
;
; PPU_MASK_REGISTER = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER= 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x00;
;
	lda     #$00
	sta     $2006
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L02CD:	lda     _index
	cmp     #$10
	bcs     L02CE
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L02CD
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
L02CE:	lda     #$00
	sta     _index
L02CF:	lda     _index
	cmp     #$10
	bcs     L02D0
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L02CF
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L02D0:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	lda     #$00
	sta     _index
L02D1:	lda     _index
	cmp     #$40
	bcs     L025D
;
; PPU_DATA_REGISTER = Attrib_Table[index];
;
	ldy     _index
	lda     _Attrib_Table,y
	sta     $2007
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	inc     _index
	jmp     L02D1
;
; }
;
L025D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ resetScrollRegister (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetScrollRegister: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0;
;
	sta     $2006
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitVBlank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitVBlank: near

.segment	"CODE"

;
; while (NMIFlag == 0);
;
L02D2:	lda     _NMIFlag
	beq     L02D2
;
; NMIFlag = 0;
;
	lda     #$00
	sta     _NMIFlag
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; loadPalette();
;
	jsr     _loadPalette
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; waitVBlank();
;
	jsr     _waitVBlank
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; inputListener();
;
L009C:	jsr     _inputListener
;
; if (pauseTransition == TRUE && FrameCounter >= 30)
;
	lda     _pauseTransition
	bne     L02D5
	lda     _FrameCounter
	cmp     #$1E
	bcc     L02D5
;
; pauseTransition = FALSE;
;
	lda     #$01
	sta     _pauseTransition
;
; if (paused == FALSE)
;
L02D5:	lda     _paused
	cmp     #$01
	bne     L00A7
;
; updatePos();
;
	jsr     _updatePos
;
; spriteCollision();
;
	jsr     _spriteCollision
;
; writeSpritesToPPU();
;
	jsr     _writeSpritesToPPU
;
; frameRoutine();
;
L00A7:	jsr     _frameRoutine
;
; while (1)
;
	jmp     L009C

.endproc

