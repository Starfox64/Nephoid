;
; File generated by cc65 v 2.16 - Git 035baa4
;
	.fopt		compiler,"cc65 v 2.16 - Git 035baa4"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMIFlag
	.export		_FrameCounter
	.export		_index
	.export		_index2
	.export		_X
	.export		_Y
	.export		_xPaddle
	.export		_yPaddle
	.export		_dirPaddle
	.export		_speedPaddle
	.export		_xBall
	.export		_yBall
	.export		_dirBall
	.export		_speedBall
	.export		_inputStatus
	.export		_launched
	.export		_paused
	.export		_pauseTransition
	.export		_TEXT
	.export		_PAUSE_TEXT
	.export		_GAME_OVER
	.export		_PADDLE
	.export		_BRICKS_X
	.export		_BRICKS_Y
	.export		_HBYTE_ADDRESSES
	.export		_LBYTE_ADDRESSES
	.export		_LEVEL1_DESTROYED
	.export		_Attrib_Table
	.export		_PALETTE
	.export		_SPRITE_TABLE
	.export		_updatePos
	.export		_inputListener
	.export		_spriteCollision
	.export		_frameRoutine
	.export		_readInput
	.export		_writeBrickToPPU
	.export		_writeBackgroundToPPU
	.export		_writePauseToPPU
	.export		_writeSpritesToPPU
	.export		_turnScreenOff
	.export		_turnScreenOn
	.export		_loadPalette
	.export		_resetScrollRegister
	.export		_waitVBlank
	.export		_main

.segment	"DATA"

_xPaddle:
	.byte	$00
_yPaddle:
	.byte	$D0
_dirPaddle:
	.byte	$03
_speedPaddle:
	.byte	$04
_xBall:
	.byte	$0C
_yBall:
	.byte	$C8
_dirBall:
	.byte	$03
_speedBall:
	.byte	$02
_launched:
	.byte	$01
_paused:
	.byte	$01
_pauseTransition:
	.byte	$01
_LEVEL1_DESTROYED:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01

.segment	"RODATA"

_TEXT:
	.byte	$4E,$45,$50,$48,$4F,$49,$44,$00
_PAUSE_TEXT:
	.byte	$50,$41,$55,$53,$45,$44,$00
_GAME_OVER:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$00
_PADDLE:
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
_BRICKS_X:
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
_BRICKS_Y:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
_HBYTE_ADDRESSES:
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
_LBYTE_ADDRESSES:
	.byte	$20
	.byte	$24
	.byte	$28
	.byte	$2C
	.byte	$30
	.byte	$34
	.byte	$38
	.byte	$3C
	.byte	$60
	.byte	$64
	.byte	$68
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$A0
	.byte	$A4
	.byte	$A8
	.byte	$AC
	.byte	$B0
	.byte	$B4
	.byte	$B8
	.byte	$BC
	.byte	$E0
	.byte	$E4
	.byte	$E8
	.byte	$EC
	.byte	$F0
	.byte	$F4
	.byte	$F8
	.byte	$FC
	.byte	$20
	.byte	$24
	.byte	$28
	.byte	$2C
	.byte	$30
	.byte	$34
	.byte	$38
	.byte	$3C
	.byte	$60
	.byte	$64
	.byte	$68
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$A0
	.byte	$A4
	.byte	$A8
	.byte	$AC
	.byte	$B0
	.byte	$B4
	.byte	$B8
	.byte	$BC
	.byte	$E0
	.byte	$E4
	.byte	$E8
	.byte	$EC
	.byte	$F0
	.byte	$F4
	.byte	$F8
	.byte	$FC
_Attrib_Table:
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
_PALETTE:
	.byte	$30
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$30
	.byte	$01
	.byte	$21
	.byte	$3C
	.byte	$30
	.byte	$17
	.byte	$27
	.byte	$28

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"OAM"
.segment	"ZEROPAGE"
_NMIFlag:
	.res	1,$00
.segment	"ZEROPAGE"
_FrameCounter:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_index2:
	.res	1,$00
.segment	"ZEROPAGE"
_X:
	.res	1,$00
.segment	"ZEROPAGE"
_Y:
	.res	1,$00
.segment	"ZEROPAGE"
_inputStatus:
	.res	1,$00
.segment	"OAM"
_SPRITE_TABLE:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ updatePos (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePos: near

.segment	"CODE"

;
; if (dirPaddle == E && xPaddle < 223) {
;
	lda     _dirPaddle
	cmp     #$03
	bne     L0434
	lda     _xPaddle
	cmp     #$DF
	bcs     L0434
;
; xPaddle += speedPaddle;
;
	lda     _speedPaddle
	clc
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall += speedPaddle;
;
	lda     _launched
	cmp     #$01
	bne     L0437
	lda     _speedPaddle
	clc
;
; else if (dirPaddle == W && xPaddle > 0) {
;
	jmp     L043C
L0434:	lda     _dirPaddle
	cmp     #$07
	bne     L0437
	lda     _xPaddle
	beq     L0437
;
; xPaddle -= speedPaddle;
;
	lda     _speedPaddle
	eor     #$FF
	sec
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall -= speedPaddle;
;
	lda     _launched
	cmp     #$01
	bne     L0437
	lda     _speedPaddle
	eor     #$FF
	sec
L043C:	adc     _xBall
	sta     _xBall
;
; if (launched == TRUE) {
;
L0437:	lda     _launched
	bne     L020D
;
; switch (dirBall) {
;
	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L0438
	cmp     #$04
	beq     L0439
	cmp     #$06
	beq     L043A
	cmp     #$08
	beq     L043B
	rts
;
; xBall += speedBall;
;
L0438:	lda     _speedBall
	clc
;
; break;
;
	jmp     L0442
;
; xBall += speedBall;
;
L0439:	lda     _speedBall
	clc
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L043D
;
; xBall -= speedBall;
;
L043A:	lda     _speedBall
	eor     #$FF
	sec
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L043D
;
; xBall -= speedBall;
;
L043B:	lda     _speedBall
	eor     #$FF
	sec
L0442:	adc     _xBall
	sta     _xBall
;
; yBall -= speedBall;
;
	lda     _speedBall
	eor     #$FF
	sec
L043D:	adc     _yBall
	sta     _yBall
;
; }
;
L020D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ inputListener (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inputListener: near

.segment	"CODE"

;
; readInput();
;
	jsr     _readInput
;
; if ((inputStatus & JP1_START) != 0
;
	lda     _inputStatus
	and     #$10
;
; && pauseTransition == FALSE)
;
	beq     L044A
	lda     _pauseTransition
	cmp     #$01
	bne     L044A
;
; paused = (paused == TRUE)?FALSE:TRUE;
;
	lda     _paused
	bne     L0448
	lda     #$01
	jmp     L0449
L0448:	lda     #$00
L0449:	sta     _paused
;
; pauseTransition = TRUE;
;
	lda     #$00
	sta     _pauseTransition
;
; FrameCounter = 0;
;
	sta     _FrameCounter
;
; writePauseToPPU();
;
	jsr     _writePauseToPPU
;
; if (paused == FALSE)
;
L044A:	lda     _paused
	cmp     #$01
	bne     L01EB
;
; if ((inputStatus & JP1_LEFT) != 0)
;
	lda     _inputStatus
	and     #$02
	beq     L044B
;
; dirPaddle = W;
;
	lda     #$07
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NW;
;
	lda     _launched
	cmp     #$01
	bne     L044E
	lda     #$08
	sta     _dirBall
;
; else if ((inputStatus & JP1_RIGHT) != 0) //255-size of paddle
;
	jmp     L044E
L044B:	lda     _inputStatus
	and     #$01
	beq     L044D
;
; dirPaddle = E;
;
	lda     #$03
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NE;
;
	lda     _launched
	cmp     #$01
	bne     L044E
	lda     #$02
	sta     _dirBall
;
; else dirPaddle = NESW;
;
	jmp     L044E
L044D:	sta     _dirPaddle
;
; if ((inputStatus & JP1_A) != 0 && launched == FALSE)
;
L044E:	lda     _inputStatus
	and     #$80
	beq     L0450
	lda     _launched
	cmp     #$01
	beq     L0453
L0450:	rts
;
; launched = TRUE;
;
L0453:	lda     #$00
	sta     _launched
;
; }
;
L01EB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spriteCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCollision: near

.segment	"CODE"

;
; if (xPaddle + 4 * 8 >= xBall && xPaddle <= xBall + 8
;
	ldx     #$00
	lda     _xPaddle
	clc
	adc     #$20
	bcc     L0229
	inx
L0229:	cmp     _xBall
	txa
	sbc     #$00
	bcc     L045E
	lda     _xPaddle
	jsr     pusha0
	lda     _xBall
;
; && yPaddle <= yBall + 8 &&  yPaddle + 8 >= yBall)
;
	clc
	adc     #$08
	bcc     L022B
	ldx     #$01
L022B:	jsr     tosicmp
	beq     L0457
	bcs     L045E
L0457:	lda     _yPaddle
	jsr     pusha0
	lda     _yBall
	clc
	adc     #$08
	bcc     L022C
	ldx     #$01
L022C:	jsr     tosicmp
	beq     L0458
	bcs     L045E
L0458:	ldx     #$00
	lda     _yPaddle
	clc
	adc     #$08
	bcc     L022D
	inx
L022D:	cmp     _yBall
	txa
	sbc     #$00
	bcc     L045E
;
; if (dirBall == SE) dirBall = NE;
;
	lda     _dirBall
	cmp     #$04
	bne     L045D
	lda     #$02
;
; else dirBall = NW;
;
	jmp     L0454
L045D:	lda     #$08
L0454:	sta     _dirBall
;
; switch (dirBall) {
;
L045E:	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L045F
	cmp     #$04
	beq     L0465
	cmp     #$06
	beq     L046B
	cmp     #$08
	beq     L0470
	jmp     L0475
;
; if (xBall >= BALL_MAX_X && yBall <= 8) dirBall = SW;
;
L045F:	lda     _xBall
	cmp     #$F7
	bcc     L0463
	lda     _yBall
	cmp     #$09
	bcs     L0463
	lda     #$06
;
; else if (yBall <= 8) dirBall = SE;
;
	jmp     L0455
L0463:	lda     _yBall
	cmp     #$09
	bcs     L0464
	lda     #$04
;
; else if (xBall >= BALL_MAX_X) dirBall = NW;
;
	jmp     L0455
L0464:	lda     _xBall
	cmp     #$F7
	lda     #$00
	bcc     L0476
	lda     #$08
;
; break;
;
	jmp     L0455
;
; if (xBall >= BALL_MAX_X && yBall >= BALL_MAX_Y) dirBall = NW;
;
L0465:	lda     _xBall
	cmp     #$F7
	bcc     L0469
	lda     _yBall
	cmp     #$E6
	bcc     L0469
	lda     #$08
;
; else if (yBall >= BALL_MAX_Y) dirBall = NE;
;
	jmp     L0455
L0469:	lda     _yBall
	cmp     #$E6
;
; else if (xBall >= BALL_MAX_X) dirBall = SW;
;
	bcs     L0481
	lda     _xBall
	cmp     #$F7
	lda     #$00
	bcc     L0476
	lda     #$06
;
; break;
;
	jmp     L0455
;
; if (xBall <= 0 && yBall >= BALL_MAX_Y) dirBall = NE;
;
L046B:	lda     _xBall
	bne     L046E
	lda     _yBall
	cmp     #$E6
	bcs     L0481
;
; else if (yBall >= BALL_MAX_Y) dirBall = NW;
;
L046E:	lda     _yBall
	cmp     #$E6
	bcc     L046F
	lda     #$08
;
; else if (xBall <= 0) dirBall = SE;
;
	jmp     L0455
L046F:	lda     _xBall
	bne     L0475
	lda     #$04
;
; break;
;
	jmp     L0455
;
; if (xBall <= 0 && yBall <= 8) dirBall = SE;
;
L0470:	lda     _xBall
	bne     L0473
	lda     _yBall
	cmp     #$09
	bcs     L0473
	lda     #$04
;
; else if (yBall <= 8) dirBall = SW;
;
	jmp     L0455
L0473:	lda     _yBall
	cmp     #$09
	bcs     L0474
	lda     #$06
;
; else if (xBall <= 0) dirBall = NE;
;
	jmp     L0455
L0474:	lda     _xBall
	bne     L0475
L0481:	lda     #$02
L0455:	sta     _dirBall
;
; for (index = 0; index < sizeof(LEVEL1_DESTROYED); ++index)
;
L0475:	lda     #$00
L0476:	sta     _index
L0477:	lda     _index
	cmp     #$40
	bcc     L0482
;
; }
;
	rts
;
; if (LEVEL1_DESTROYED[index] == FALSE)
;
L0482:	ldy     _index
	lda     _LEVEL1_DESTROYED,y
	cmp     #$01
	jne     L0480
;
; if (xBall <= BRICKS_X[index] + 32 && xBall + 8 >= BRICKS_X[index]
;
	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L0292
	ldx     #$01
L0292:	jsr     tosicmp
	beq     L0459
	jcs     L0480
L0459:	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L0294
	inx
L0294:	jsr     pushax
	ldy     _index
	lda     _BRICKS_X,y
;
; && yBall < BRICKS_Y[index] + 16 && yBall + 8 >= BRICKS_Y[index])
;
	jsr     tosicmp0
	jcc     L0480
	lda     _yBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_Y,y
	clc
	adc     #$10
	bcc     L0299
	ldx     #$01
L0299:	jsr     tosicmp
	jcs     L0480
	ldx     #$00
	lda     _yBall
	clc
	adc     #$08
	bcc     L029A
	inx
L029A:	jsr     pushax
	ldy     _index
	lda     _BRICKS_Y,y
	jsr     tosicmp0
	jcc     L0480
;
; LEVEL1_DESTROYED[index] = TRUE;
;
	ldy     _index
	lda     #$00
	sta     _LEVEL1_DESTROYED,y
;
; switch (dirBall)
;
	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L0478
	cmp     #$04
	beq     L047A
	cmp     #$06
	beq     L047C
	cmp     #$08
	jeq     L047E
	jmp     L02A4
;
; if (xBall < BRICKS_X[index] && xBall + 8 >= BRICKS_X[index]) dirBall = NW;
;
L0478:	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	jsr     tosicmp0
	bcs     L0479
	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L02AC
	inx
L02AC:	jsr     pushax
	ldy     _index
	lda     _BRICKS_X,y
	jsr     tosicmp0
	bcc     L0479
	lda     #$08
;
; else dirBall = SE;
;
	jmp     L0456
L0479:	lda     #$04
;
; break;
;
	jmp     L0456
;
; if (xBall < BRICKS_X[index] && xBall + 8 >= BRICKS_X[index]) dirBall = SW;
;
L047A:	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	jsr     tosicmp0
	bcs     L047B
	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L02BC
	inx
L02BC:	jsr     pushax
	ldy     _index
	lda     _BRICKS_X,y
	jsr     tosicmp0
	jcs     L047F
;
; else dirBall = NE;
;
L047B:	lda     #$02
;
; break;
;
	jmp     L0456
;
; if (xBall < BRICKS_X[index] + 32 && xBall + 8 >= BRICKS_X[index] + 32) dirBall = SE;
;
L047C:	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L02CB
	ldx     #$01
L02CB:	jsr     tosicmp
	bcs     L047D
	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L02CD
	inx
L02CD:	jsr     pushax
	ldy     _index
	ldx     #$00
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L02D0
	inx
L02D0:	jsr     tosicmp
	bcc     L047D
	lda     #$04
;
; else dirBall = NW;
;
	jmp     L0456
L047D:	lda     #$08
;
; break;
;
	jmp     L0456
;
; if (xBall < BRICKS_X[index] + 32 && xBall + 8 >= BRICKS_X[index] + 32) dirBall = NE;
;
L047E:	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L02DD
	ldx     #$01
L02DD:	jsr     tosicmp
	bcs     L047F
	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L02DF
	inx
L02DF:	jsr     pushax
	ldy     _index
	ldx     #$00
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L02E2
	inx
L02E2:	jsr     tosicmp
	bcc     L047F
	lda     #$02
;
; else dirBall = SW;
;
	jmp     L0456
L047F:	lda     #$06
L0456:	sta     _dirBall
;
; X = HBYTE_ADDRESSES[index];
;
L02A4:	ldy     _index
	lda     _HBYTE_ADDRESSES,y
	sta     _X
;
; Y = LBYTE_ADDRESSES[index];
;
	ldy     _index
	lda     _LBYTE_ADDRESSES,y
	sta     _Y
;
; waitVBlank();
;
	jsr     _waitVBlank
;
; writeBrickToPPU();
;
	jsr     _writeBrickToPPU
;
; resetScrollRegister();
;
	jmp     _resetScrollRegister
;
; for (index = 0; index < sizeof(LEVEL1_DESTROYED); ++index)
;
L0480:	inc     _index
	jmp     L0477

.endproc

; ---------------------------------------------------------------
; void __near__ frameRoutine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_frameRoutine: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; OAM_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2003
;
; OAM_DMA_REGISTER = 2;
;
	lda     #$02
	sta     $4014
;
; resetScrollRegister();
;
	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ readInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readInput: near

.segment	"CODE"

;
; unsigned char test = 0;//TO DELETE
;
	lda     #$00
	jsr     pusha
;
; inputStatus = 0;
;
	sta     _inputStatus
;
; JOYPAD1_REGISTER = 1;
;
	lda     #$01
	sta     $4016
;
; JOYPAD1_REGISTER = 0;
;
	lda     #$00
	sta     $4016
;
; for (index = 8; index > 0; --index)
;
	lda     #$08
	sta     _index
L0483:	lda     _index
	beq     L033D
;
; test = (JOYPAD1_REGISTER & 1);
;
	lda     $4016
	and     #$01
	ldy     #$00
	sta     (sp),y
;
; inputStatus = inputStatus | (test << index-1);
;
	sta     ptr1
	lda     _index
	sec
	sbc     #$01
	tay
	lda     ptr1
L0484:	asl     a
	dey
	bpl     L0484
	ror     a
	ora     _inputStatus
	sta     _inputStatus
;
; for (index = 8; index > 0; --index)
;
	dec     _index
	jmp     L0483
;
; }
;
L033D:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ writeBrickToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBrickToPPU: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER = X;
;
	lda     _X
	sta     $2006
;
; PPU_ADDRESS_REGISTER = Y;
;
	lda     _Y
	sta     $2006
;
; if (LEVEL1_DESTROYED[index] == FALSE)
;
	ldy     _index
	lda     _LEVEL1_DESTROYED,y
	cmp     #$01
	bne     L0487
;
; PPU_DATA_REGISTER = 0x80;
;
	lda     #$80
	sta     $2007
;
; PPU_DATA_REGISTER = 0x81;
;
	lda     #$81
	sta     $2007
;
; PPU_DATA_REGISTER = 0x81;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x82;
;
	lda     #$82
;
; else
;
	jmp     L0485
;
; PPU_DATA_REGISTER = 0x83;
;
L0487:	lda     #$83
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
L0485:	sta     $2007
;
; Y += 32;
;
	lda     #$20
	clc
	adc     _Y
	sta     _Y
;
; if (Y < 32) ++X;
;
	cmp     #$20
	bcs     L0488
	inc     _X
;
; PPU_ADDRESS_REGISTER = X;
;
L0488:	lda     _X
	sta     $2006
;
; PPU_ADDRESS_REGISTER = Y;
;
	lda     _Y
	sta     $2006
;
; if (LEVEL1_DESTROYED[index] == FALSE)
;
	ldy     _index
	lda     _LEVEL1_DESTROYED,y
	cmp     #$01
	bne     L0489
;
; PPU_DATA_REGISTER = 0x90;
;
	lda     #$90
	sta     $2007
;
; PPU_DATA_REGISTER = 0x91;
;
	lda     #$91
	sta     $2007
;
; PPU_DATA_REGISTER = 0x91;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x92;
;
	lda     #$92
;
; else
;
	jmp     L0486
;
; PPU_DATA_REGISTER = 0x83;
;
L0489:	lda     #$83
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
L0486:	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ writeBackgroundToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBackgroundToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; for (index = 0; index < sizeof(LEVEL1_DESTROYED); ++index)
;
	lda     #$00
	sta     _index
L048A:	lda     _index
	cmp     #$40
	bcs     L03C3
;
; X = HBYTE_ADDRESSES[index];
;
	ldy     _index
	lda     _HBYTE_ADDRESSES,y
	sta     _X
;
; Y = LBYTE_ADDRESSES[index];
;
	ldy     _index
	lda     _LBYTE_ADDRESSES,y
	sta     _Y
;
; writeBrickToPPU();
;
	jsr     _writeBrickToPPU
;
; for (index = 0; index < sizeof(LEVEL1_DESTROYED); ++index)
;
	inc     _index
	jmp     L048A
;
; resetScrollRegister();
;
L03C3:	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; waitVBlank();
;
	jmp     _waitVBlank

.endproc

; ---------------------------------------------------------------
; void __near__ writePauseToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writePauseToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; PPU_ADDRESS_REGISTER = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x90;
;
	lda     #$90
	sta     $2006
;
; for (index = 0; index < sizeof(PAUSE_TEXT); ++index)
;
	lda     #$00
	sta     _index
L048C:	lda     _index
	cmp     #$07
	bcs     L03AA
;
; if (paused == FALSE) PPU_DATA_REGISTER = 0;
;
	lda     _paused
	cmp     #$01
	bne     L03B2
	lda     #$00
;
; else PPU_DATA_REGISTER = PAUSE_TEXT[index];
;
	jmp     L048B
L03B2:	ldy     _index
	lda     _PAUSE_TEXT,y
L048B:	sta     $2007
;
; for (index = 0; index < sizeof(PAUSE_TEXT); ++index)
;
	inc     _index
	jmp     L048C
;
; resetScrollRegister();
;
L03AA:	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ writeSpritesToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeSpritesToPPU: near

.segment	"CODE"

;
; index2 = 0;
;
	lda     #$00
	sta     _index2
;
; for (index = 0; index < sizeof(PADDLE); ++index)
;
	sta     _index
L048E:	lda     _index
	cmp     #$04
	bcs     L02F8
;
; SPRITE_TABLE[index2] = yPaddle;
;
	ldy     _index2
	lda     _yPaddle
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = PADDLE[index];
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _index2
	bcc     L0307
	inx
L0307:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _PADDLE,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = 1 + ((index==3)?SPRITE_VERTICAL_FLIP:0);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _index2
	bcc     L030E
	inx
L030E:	sta     ptr1
	stx     ptr1+1
	lda     _index
	cmp     #$03
	bne     L048F
	lda     #$40
	jmp     L0314
L048F:	tya
L0314:	clc
	adc     #$01
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = xPaddle + (index << 3);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _index2
	bcc     L031A
	inx
L031A:	sta     ptr1
	stx     ptr1+1
	lda     _index
	asl     a
	asl     a
	asl     a
	clc
	adc     _xPaddle
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; for (index = 0; index < sizeof(PADDLE); ++index)
;
	inc     _index
	jmp     L048E
;
; SPRITE_TABLE[index2] = yBall;
;
L02F8:	ldy     _index2
	lda     _yBall
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = 0;
;
	ldy     _index2
	lda     #$00
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = 3;
;
	ldy     _index2
	lda     #$03
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = xBall;
;
	ldy     _index2
	lda     _xBall
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOff: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK_REGISTER = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOn: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0x90;
;
	lda     #$90
	sta     $2000
;
; PPU_MASK_REGISTER = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER= 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x00;
;
	lda     #$00
	sta     $2006
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L0490:	lda     _index
	cmp     #$10
	bcs     L0491
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L0490
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
L0491:	lda     #$00
	sta     _index
L0492:	lda     _index
	cmp     #$10
	bcs     L0493
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L0492
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L0493:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	lda     #$00
	sta     _index
L0494:	lda     _index
	cmp     #$40
	bcs     L040F
;
; PPU_DATA_REGISTER = Attrib_Table[index];
;
	ldy     _index
	lda     _Attrib_Table,y
	sta     $2007
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	inc     _index
	jmp     L0494
;
; }
;
L040F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ resetScrollRegister (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetScrollRegister: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0;
;
	sta     $2006
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitVBlank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitVBlank: near

.segment	"CODE"

;
; while (NMIFlag == 0);
;
L0495:	lda     _NMIFlag
	beq     L0495
;
; NMIFlag = 0;
;
	lda     #$00
	sta     _NMIFlag
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; loadPalette();
;
	jsr     _loadPalette
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; inputListener();
;
L01AC:	jsr     _inputListener
;
; if (pauseTransition == TRUE && FrameCounter >= 30)
;
	lda     _pauseTransition
	bne     L0498
	lda     _FrameCounter
	cmp     #$1E
	bcc     L0498
;
; pauseTransition = FALSE;
;
	lda     #$01
	sta     _pauseTransition
;
; if (paused == FALSE)
;
L0498:	lda     _paused
	cmp     #$01
	bne     L01B7
;
; updatePos();
;
	jsr     _updatePos
;
; spriteCollision();
;
	jsr     _spriteCollision
;
; writeSpritesToPPU();
;
	jsr     _writeSpritesToPPU
;
; frameRoutine();
;
L01B7:	jsr     _frameRoutine
;
; while (1)
;
	jmp     L01AC

.endproc

