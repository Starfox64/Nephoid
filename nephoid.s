;
; File generated by cc65 v 2.16 - Git 035baa4
;
	.fopt		compiler,"cc65 v 2.16 - Git 035baa4"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMIFlag
	.export		_FrameCounter
	.export		_index
	.export		_index2
	.export		_X
	.export		_Y
	.export		_xPaddle
	.export		_yPaddle
	.export		_dirPaddle
	.export		_speedPaddle
	.export		_xBall
	.export		_yBall
	.export		_dirBall
	.export		_speedBall
	.export		_inputStatus
	.export		_launched
	.export		_paused
	.export		_pauseTransition
	.export		_TEXT
	.export		_PAUSE_TEXT
	.export		_PADDLE
	.export		_BRICKS_X
	.export		_BRICKS_Y
	.export		_HBYTE_ADDRESSES
	.export		_LBYTE_ADDRESSES
	.export		_LEVEL1_DESTROYED
	.export		_Attrib_Table
	.export		_PALETTE
	.export		_SPRITE_TABLE
	.export		_updatePos
	.export		_inputListener
	.export		_spriteCollision
	.export		_frameRoutine
	.export		_readInput
	.export		_writeBackgroundToPPU
	.export		_writeSpritesToPPU
	.export		_turnScreenOff
	.export		_turnScreenOn
	.export		_loadPalette
	.export		_resetScrollRegister
	.export		_waitVBlank
	.export		_main
	.export		_writeBrickToPPU

.segment	"DATA"

_xPaddle:
	.byte	$00
_yPaddle:
	.byte	$B0
_dirPaddle:
	.byte	$03
_speedPaddle:
	.byte	$02
_xBall:
	.byte	$0C
_yBall:
	.byte	$A8
_dirBall:
	.byte	$03
_speedBall:
	.byte	$02
_launched:
	.byte	$01
_paused:
	.byte	$01
_pauseTransition:
	.byte	$01
_LEVEL1_DESTROYED:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01

.segment	"RODATA"

_TEXT:
	.byte	$4E,$45,$50,$48,$4F,$49,$44,$00
_PAUSE_TEXT:
	.byte	$50,$41,$55,$53,$45,$44,$00
_PADDLE:
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
_BRICKS_X:
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
_BRICKS_Y:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
_HBYTE_ADDRESSES:
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
_LBYTE_ADDRESSES:
	.byte	$20
	.byte	$24
	.byte	$28
	.byte	$2C
	.byte	$30
	.byte	$34
	.byte	$38
	.byte	$3C
	.byte	$60
	.byte	$64
	.byte	$68
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$A0
	.byte	$A4
	.byte	$A8
	.byte	$AC
	.byte	$B0
	.byte	$B4
	.byte	$B8
	.byte	$BC
	.byte	$E0
	.byte	$E4
	.byte	$E8
	.byte	$EC
	.byte	$F0
	.byte	$F4
	.byte	$F8
	.byte	$FC
	.byte	$20
	.byte	$24
	.byte	$28
	.byte	$2C
	.byte	$30
	.byte	$34
	.byte	$38
	.byte	$3C
	.byte	$60
	.byte	$64
	.byte	$68
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$A0
	.byte	$A4
	.byte	$A8
	.byte	$AC
	.byte	$B0
	.byte	$B4
	.byte	$B8
	.byte	$BC
	.byte	$E0
	.byte	$E4
	.byte	$E8
	.byte	$EC
	.byte	$F0
	.byte	$F4
	.byte	$F8
	.byte	$FC
_Attrib_Table:
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
_PALETTE:
	.byte	$30
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$30
	.byte	$01
	.byte	$21
	.byte	$3C
	.byte	$30
	.byte	$17
	.byte	$27
	.byte	$28

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"OAM"
.segment	"ZEROPAGE"
_NMIFlag:
	.res	1,$00
.segment	"ZEROPAGE"
_FrameCounter:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_index2:
	.res	1,$00
.segment	"ZEROPAGE"
_X:
	.res	1,$00
.segment	"ZEROPAGE"
_Y:
	.res	1,$00
.segment	"ZEROPAGE"
_inputStatus:
	.res	1,$00
.segment	"OAM"
_SPRITE_TABLE:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ updatePos (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePos: near

.segment	"CODE"

;
; if (dirPaddle == E && xPaddle < 223) {
;
	lda     _dirPaddle
	cmp     #$03
	bne     L03BD
	lda     _xPaddle
	cmp     #$DF
	bcs     L03BD
;
; xPaddle += speedPaddle;
;
	lda     _speedPaddle
	clc
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall += speedPaddle;
;
	lda     _launched
	cmp     #$01
	bne     L03C0
	lda     _speedPaddle
	clc
;
; else if (dirPaddle == W && xPaddle > 0) {
;
	jmp     L03C5
L03BD:	lda     _dirPaddle
	cmp     #$07
	bne     L03C0
	lda     _xPaddle
	beq     L03C0
;
; xPaddle -= speedPaddle;
;
	lda     _speedPaddle
	eor     #$FF
	sec
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall -= speedPaddle;
;
	lda     _launched
	cmp     #$01
	bne     L03C0
	lda     _speedPaddle
	eor     #$FF
	sec
L03C5:	adc     _xBall
	sta     _xBall
;
; if (launched == TRUE) {
;
L03C0:	lda     _launched
	bne     L020C
;
; switch (dirBall) {
;
	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L03C1
	cmp     #$04
	beq     L03C2
	cmp     #$06
	beq     L03C3
	cmp     #$08
	beq     L03C4
	rts
;
; xBall += speedBall;
;
L03C1:	lda     _speedBall
	clc
;
; break;
;
	jmp     L03CB
;
; xBall += speedBall;
;
L03C2:	lda     _speedBall
	clc
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L03C6
;
; xBall -= speedBall;
;
L03C3:	lda     _speedBall
	eor     #$FF
	sec
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L03C6
;
; xBall -= speedBall;
;
L03C4:	lda     _speedBall
	eor     #$FF
	sec
L03CB:	adc     _xBall
	sta     _xBall
;
; yBall -= speedBall;
;
	lda     _speedBall
	eor     #$FF
	sec
L03C6:	adc     _yBall
	sta     _yBall
;
; }
;
L020C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ inputListener (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inputListener: near

.segment	"CODE"

;
; readInput();
;
	jsr     _readInput
;
; if ((inputStatus & JP1_START) != 0
;
	lda     _inputStatus
	and     #$10
;
; && pauseTransition == FALSE)
;
	beq     L03D3
	lda     _pauseTransition
	cmp     #$01
	bne     L03D3
;
; paused = (paused == TRUE)?FALSE:TRUE;
;
	lda     _paused
	bne     L03D1
	lda     #$01
	jmp     L03D2
L03D1:	lda     #$00
L03D2:	sta     _paused
;
; pauseTransition = TRUE;
;
	lda     #$00
	sta     _pauseTransition
;
; FrameCounter = 0;
;
	sta     _FrameCounter
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; if (paused == FALSE)
;
L03D3:	lda     _paused
	cmp     #$01
	bne     L01EA
;
; if ((inputStatus & JP1_LEFT) != 0)
;
	lda     _inputStatus
	and     #$02
	beq     L03D4
;
; dirPaddle = W;
;
	lda     #$07
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NW;
;
	lda     _launched
	cmp     #$01
	bne     L03D7
	lda     #$08
	sta     _dirBall
;
; else if ((inputStatus & JP1_RIGHT) != 0) //255-size of paddle
;
	jmp     L03D7
L03D4:	lda     _inputStatus
	and     #$01
	beq     L03D6
;
; dirPaddle = E;
;
	lda     #$03
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NE;
;
	lda     _launched
	cmp     #$01
	bne     L03D7
	lda     #$02
	sta     _dirBall
;
; else dirPaddle = NESW;
;
	jmp     L03D7
L03D6:	sta     _dirPaddle
;
; if ((inputStatus & JP1_A) != 0 && launched == FALSE)
;
L03D7:	lda     _inputStatus
	and     #$80
	beq     L03D9
	lda     _launched
	cmp     #$01
	beq     L03DC
L03D9:	rts
;
; launched = TRUE;
;
L03DC:	lda     #$00
	sta     _launched
;
; }
;
L01EA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spriteCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCollision: near

.segment	"CODE"

;
; if (xPaddle + 4 * 8 >= xBall && xPaddle <= xBall + 8
;
	ldx     #$00
	lda     _xPaddle
	clc
	adc     #$20
	bcc     L0228
	inx
L0228:	cmp     _xBall
	txa
	sbc     #$00
	bcc     L03E5
	lda     _xPaddle
	jsr     pusha0
	lda     _xBall
;
; && yPaddle <= yBall + 8 &&  yPaddle + 8 >= yBall)
;
	clc
	adc     #$08
	bcc     L022A
	ldx     #$01
L022A:	jsr     tosicmp
	beq     L03DF
	bcs     L03E5
L03DF:	lda     _yPaddle
	jsr     pusha0
	lda     _yBall
	clc
	adc     #$08
	bcc     L022B
	ldx     #$01
L022B:	jsr     tosicmp
	beq     L03E0
	bcs     L03E5
L03E0:	ldx     #$00
	lda     _yPaddle
	clc
	adc     #$08
	bcc     L022C
	inx
L022C:	cmp     _yBall
	txa
	sbc     #$00
	bcc     L03E5
;
; if (dirBall == SE) dirBall = NE;
;
	lda     _dirBall
	cmp     #$04
	bne     L03E4
	lda     #$02
;
; else dirBall = NW;
;
	jmp     L03DD
L03E4:	lda     #$08
L03DD:	sta     _dirBall
;
; switch (dirBall) {
;
L03E5:	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L03E6
	cmp     #$04
	beq     L03EC
	cmp     #$06
	beq     L03F2
	cmp     #$08
	beq     L03F7
	rts
;
; if (xBall >= BALL_MAX_X && yBall <= 0) dirBall = SW;
;
L03E6:	lda     _xBall
	cmp     #$F7
	bcc     L03EA
	lda     _yBall
	bne     L03EA
	lda     #$06
;
; else if (yBall <= 0) dirBall = SE;
;
	jmp     L03DE
L03EA:	lda     _yBall
	bne     L03EB
	lda     #$04
;
; else if (xBall >= BALL_MAX_X) dirBall = NW;
;
	jmp     L03DE
L03EB:	lda     _xBall
	cmp     #$F7
	bcc     L0237
	lda     #$08
;
; break;
;
	jmp     L03DE
;
; if (xBall >= BALL_MAX_X && yBall >= BALL_MAX_Y) dirBall = NW;
;
L03EC:	lda     _xBall
	cmp     #$F7
	bcc     L03F0
	lda     _yBall
	cmp     #$E6
	bcc     L03F0
	lda     #$08
;
; else if (yBall >= BALL_MAX_Y) dirBall = NE;
;
	jmp     L03DE
L03F0:	lda     _yBall
	cmp     #$E6
;
; else if (xBall >= BALL_MAX_X) dirBall = SW;
;
	bcs     L03FC
	lda     _xBall
	cmp     #$F7
	bcc     L0237
	lda     #$06
;
; break;
;
	jmp     L03DE
;
; if (xBall <= 0 && yBall >= BALL_MAX_Y) dirBall = NE;
;
L03F2:	lda     _xBall
	bne     L03F5
	lda     _yBall
	cmp     #$E6
	bcs     L03FC
;
; else if (yBall >= BALL_MAX_Y) dirBall = NW;
;
L03F5:	lda     _yBall
	cmp     #$E6
	bcc     L03F6
	lda     #$08
;
; else if (xBall <= 0) dirBall = SE;
;
	jmp     L03DE
L03F6:	lda     _xBall
	bne     L0237
	lda     #$04
;
; break;
;
	jmp     L03DE
;
; if (xBall <= 0 && yBall <= 0) dirBall = SE;
;
L03F7:	lda     _xBall
	bne     L03FA
	lda     _yBall
	bne     L03FA
	lda     #$04
;
; else if (yBall <= 0) dirBall = SW;
;
	jmp     L03DE
L03FA:	lda     _yBall
	bne     L03FB
	lda     #$06
;
; else if (xBall <= 0) dirBall = NE;
;
	jmp     L03DE
L03FB:	lda     _xBall
	bne     L0237
L03FC:	lda     #$02
L03DE:	sta     _dirBall
;
; }
;
L0237:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ frameRoutine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_frameRoutine: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; OAM_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2003
;
; OAM_DMA_REGISTER = 2;
;
	lda     #$02
	sta     $4014
;
; resetScrollRegister();
;
	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ readInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readInput: near

.segment	"CODE"

;
; unsigned char test = 0;//TO DELETE
;
	lda     #$00
	jsr     pusha
;
; inputStatus = 0;
;
	sta     _inputStatus
;
; JOYPAD1_REGISTER = 1;
;
	lda     #$01
	sta     $4016
;
; JOYPAD1_REGISTER = 0;
;
	lda     #$00
	sta     $4016
;
; for (index = 8; index > 0; --index)
;
	lda     #$08
	sta     _index
L03FD:	lda     _index
	beq     L02C9
;
; test = (JOYPAD1_REGISTER & 1);
;
	lda     $4016
	and     #$01
	ldy     #$00
	sta     (sp),y
;
; inputStatus = inputStatus | (test << index-1);
;
	sta     ptr1
	lda     _index
	sec
	sbc     #$01
	tay
	lda     ptr1
L03FE:	asl     a
	dey
	bpl     L03FE
	ror     a
	ora     _inputStatus
	sta     _inputStatus
;
; for (index = 8; index > 0; --index)
;
	dec     _index
	jmp     L03FD
;
; }
;
L02C9:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ writeBackgroundToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBackgroundToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; for (index = 0; index < sizeof(LEVEL1_DESTROYED); ++index)
;
	lda     #$00
	sta     _index
L0400:	lda     _index
	cmp     #$40
	bcs     L0401
;
; X = HBYTE_ADDRESSES[index];
;
	ldy     _index
	lda     _HBYTE_ADDRESSES,y
	sta     _X
;
; Y = LBYTE_ADDRESSES[index];
;
	ldy     _index
	lda     _LBYTE_ADDRESSES,y
	sta     _Y
;
; writeBrickToPPU();
;
	jsr     _writeBrickToPPU
;
; for (index = 0; index < sizeof(LEVEL1_DESTROYED); ++index)
;
	inc     _index
	jmp     L0400
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L0401:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x90;
;
	lda     #$90
	sta     $2006
;
; for (index = 0; index < sizeof(PAUSE_TEXT); ++index)
;
	lda     #$00
	sta     _index
L0402:	lda     _index
	cmp     #$07
	bcs     L034A
;
; if (paused == FALSE) PPU_DATA_REGISTER = 0;
;
	lda     _paused
	cmp     #$01
	bne     L0352
	lda     #$00
;
; else PPU_DATA_REGISTER = PAUSE_TEXT[index];
;
	jmp     L03FF
L0352:	ldy     _index
	lda     _PAUSE_TEXT,y
L03FF:	sta     $2007
;
; for (index = 0; index < sizeof(PAUSE_TEXT); ++index)
;
	inc     _index
	jmp     L0402
;
; resetScrollRegister();
;
L034A:	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; waitVBlank();
;
	jmp     _waitVBlank

.endproc

; ---------------------------------------------------------------
; void __near__ writeSpritesToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeSpritesToPPU: near

.segment	"CODE"

;
; index2 = 0;
;
	lda     #$00
	sta     _index2
;
; for (index = 0; index < sizeof(PADDLE); ++index)
;
	sta     _index
L0404:	lda     _index
	cmp     #$04
	bcs     L0284
;
; SPRITE_TABLE[index2] = yPaddle;
;
	ldy     _index2
	lda     _yPaddle
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = PADDLE[index];
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _index2
	bcc     L0293
	inx
L0293:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _PADDLE,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = 1 + ((index==3)?SPRITE_VERTICAL_FLIP:0);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _index2
	bcc     L029A
	inx
L029A:	sta     ptr1
	stx     ptr1+1
	lda     _index
	cmp     #$03
	bne     L0405
	lda     #$40
	jmp     L02A0
L0405:	tya
L02A0:	clc
	adc     #$01
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = xPaddle + (index << 3);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _index2
	bcc     L02A6
	inx
L02A6:	sta     ptr1
	stx     ptr1+1
	lda     _index
	asl     a
	asl     a
	asl     a
	clc
	adc     _xPaddle
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; for (index = 0; index < sizeof(PADDLE); ++index)
;
	inc     _index
	jmp     L0404
;
; SPRITE_TABLE[index2] = yBall;
;
L0284:	ldy     _index2
	lda     _yBall
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = 0;
;
	ldy     _index2
	lda     #$00
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = 3;
;
	ldy     _index2
	lda     #$03
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = xBall;
;
	ldy     _index2
	lda     _xBall
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOff: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK_REGISTER = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOn: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0x90;
;
	lda     #$90
	sta     $2000
;
; PPU_MASK_REGISTER = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER= 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x00;
;
	lda     #$00
	sta     $2006
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L0406:	lda     _index
	cmp     #$10
	bcs     L0407
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L0406
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
L0407:	lda     #$00
	sta     _index
L0408:	lda     _index
	cmp     #$10
	bcs     L0409
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L0408
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L0409:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	lda     #$00
	sta     _index
L040A:	lda     _index
	cmp     #$40
	bcs     L0398
;
; PPU_DATA_REGISTER = Attrib_Table[index];
;
	ldy     _index
	lda     _Attrib_Table,y
	sta     $2007
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	inc     _index
	jmp     L040A
;
; }
;
L0398:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ resetScrollRegister (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetScrollRegister: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0;
;
	sta     $2006
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitVBlank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitVBlank: near

.segment	"CODE"

;
; while (NMIFlag == 0);
;
L040B:	lda     _NMIFlag
	beq     L040B
;
; NMIFlag = 0;
;
	lda     #$00
	sta     _NMIFlag
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; loadPalette();
;
	jsr     _loadPalette
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; inputListener();
;
L01AB:	jsr     _inputListener
;
; if (pauseTransition == TRUE && FrameCounter >= 30)
;
	lda     _pauseTransition
	bne     L040E
	lda     _FrameCounter
	cmp     #$1E
	bcc     L040E
;
; pauseTransition = FALSE;
;
	lda     #$01
	sta     _pauseTransition
;
; if (paused == FALSE)
;
L040E:	lda     _paused
	cmp     #$01
	bne     L01B6
;
; updatePos();
;
	jsr     _updatePos
;
; spriteCollision();
;
	jsr     _spriteCollision
;
; writeSpritesToPPU();
;
	jsr     _writeSpritesToPPU
;
; frameRoutine();
;
L01B6:	jsr     _frameRoutine
;
; while (1)
;
	jmp     L01AB

.endproc

; ---------------------------------------------------------------
; void __near__ writeBrickToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBrickToPPU: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER = X;
;
	lda     _X
	sta     $2006
;
; PPU_ADDRESS_REGISTER = Y;
;
	lda     _Y
	sta     $2006
;
; if (LEVEL1_DESTROYED[index] == FALSE)
;
	ldy     _index
	lda     _LEVEL1_DESTROYED,y
	cmp     #$01
	bne     L0411
;
; PPU_DATA_REGISTER = 0x80;
;
	lda     #$80
	sta     $2007
;
; PPU_DATA_REGISTER = 0x81;
;
	lda     #$81
	sta     $2007
;
; PPU_DATA_REGISTER = 0x81;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x82;
;
	lda     #$82
;
; else
;
	jmp     L040F
;
; PPU_DATA_REGISTER = 0x00;
;
L0411:	lda     #$00
	sta     $2007
;
; PPU_DATA_REGISTER = 0x00;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x00;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x00;
;
L040F:	sta     $2007
;
; Y += 32;
;
	lda     #$20
	clc
	adc     _Y
	sta     _Y
;
; if (Y < 32) ++X;
;
	cmp     #$20
	bcs     L0412
	inc     _X
;
; PPU_ADDRESS_REGISTER = X;
;
L0412:	lda     _X
	sta     $2006
;
; PPU_ADDRESS_REGISTER = Y;
;
	lda     _Y
	sta     $2006
;
; if (LEVEL1_DESTROYED[index] == FALSE)
;
	ldy     _index
	lda     _LEVEL1_DESTROYED,y
	cmp     #$01
	bne     L0413
;
; PPU_DATA_REGISTER = 0x90;
;
	lda     #$90
	sta     $2007
;
; PPU_DATA_REGISTER = 0x91;
;
	lda     #$91
	sta     $2007
;
; PPU_DATA_REGISTER = 0x91;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x92;
;
	lda     #$92
;
; else
;
	jmp     L0410
;
; PPU_DATA_REGISTER = 0x00;
;
L0413:	lda     #$00
	sta     $2007
;
; PPU_DATA_REGISTER = 0x00;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x00;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x00;
;
L0410:	sta     $2007
;
; }
;
	rts

.endproc

