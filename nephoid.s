;
; File generated by cc65 v 2.16 - Git 035baa4
;
	.fopt		compiler,"cc65 v 2.16 - Git 035baa4"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMIFlag
	.export		_FrameCounter
	.export		_index
	.export		_spriteIndex
	.export		_xPaddle
	.export		_yPaddle
	.export		_dirPaddle
	.export		_speedPaddle
	.export		_xBall
	.export		_yBall
	.export		_dirBall
	.export		_speedBall
	.export		_inputStatus
	.export		_launched
	.export		_paused
	.export		_pauseTransition
	.export		_TEXT
	.export		_PAUSE_TEXT
	.export		_PADDLE
	.export		_LEVEL1_X
	.export		_LEVEL1_Y
	.export		_LEVEL1_DESTROYED
	.export		_PALETTE
	.export		_Attrib_Table
	.export		_SPRITE_TABLE
	.export		_updatePos
	.export		_inputListener
	.export		_spriteCollision
	.export		_frameRoutine
	.export		_readInput
	.export		_writeBackgroundToPPU
	.export		_writeSpritesToPPU
	.export		_turnScreenOff
	.export		_turnScreenOn
	.export		_loadPalette
	.export		_resetScrollRegister
	.export		_waitVBlank
	.export		_main

.segment	"DATA"

_xPaddle:
	.byte	$00
_yPaddle:
	.byte	$B0
_dirPaddle:
	.byte	$03
_speedPaddle:
	.byte	$02
_xBall:
	.byte	$0C
_yBall:
	.byte	$A8
_dirBall:
	.byte	$03
_speedBall:
	.byte	$02
_launched:
	.byte	$01
_paused:
	.byte	$01
_pauseTransition:
	.byte	$01
_LEVEL1_DESTROYED:

.segment	"RODATA"

_TEXT:
	.byte	$4E,$45,$50,$48,$4F,$49,$44,$00
_PAUSE_TEXT:
	.byte	$50,$41,$55,$53,$45,$44,$00
_PADDLE:
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
_LEVEL1_X:
_LEVEL1_Y:
_PALETTE:
	.byte	$30
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$30
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$30
	.byte	$17
	.byte	$27
	.byte	$28
_Attrib_Table:
	.byte	$44
	.byte	$BB
	.byte	$44
	.byte	$BB

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"OAM"
.segment	"ZEROPAGE"
_NMIFlag:
	.res	1,$00
.segment	"ZEROPAGE"
_FrameCounter:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_spriteIndex:
	.res	1,$00
.segment	"ZEROPAGE"
_inputStatus:
	.res	1,$00
.segment	"OAM"
_SPRITE_TABLE:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ updatePos (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePos: near

.segment	"CODE"

;
; if (dirPaddle == E && xPaddle < 223) {
;
	lda     _dirPaddle
	cmp     #$03
	bne     L0205
	lda     _xPaddle
	cmp     #$DF
	bcs     L0205
;
; xPaddle += speedPaddle;
;
	lda     _speedPaddle
	clc
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall += speedPaddle;
;
	lda     _launched
	cmp     #$01
	bne     L0208
	lda     _speedPaddle
	clc
;
; else if (dirPaddle == W && xPaddle > 0) {
;
	jmp     L020D
L0205:	lda     _dirPaddle
	cmp     #$07
	bne     L0208
	lda     _xPaddle
	beq     L0208
;
; xPaddle -= speedPaddle;
;
	lda     _speedPaddle
	eor     #$FF
	sec
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall -= speedPaddle;
;
	lda     _launched
	cmp     #$01
	bne     L0208
	lda     _speedPaddle
	eor     #$FF
	sec
L020D:	adc     _xBall
	sta     _xBall
;
; if (launched == TRUE) {
;
L0208:	lda     _launched
	bne     L008F
;
; switch (dirBall) {
;
	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L0209
	cmp     #$04
	beq     L020A
	cmp     #$06
	beq     L020B
	cmp     #$08
	beq     L020C
	rts
;
; xBall += speedBall;
;
L0209:	lda     _speedBall
	clc
;
; break;
;
	jmp     L0213
;
; xBall += speedBall;
;
L020A:	lda     _speedBall
	clc
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L020E
;
; xBall -= speedBall;
;
L020B:	lda     _speedBall
	eor     #$FF
	sec
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L020E
;
; xBall -= speedBall;
;
L020C:	lda     _speedBall
	eor     #$FF
	sec
L0213:	adc     _xBall
	sta     _xBall
;
; yBall -= speedBall;
;
	lda     _speedBall
	eor     #$FF
	sec
L020E:	adc     _yBall
	sta     _yBall
;
; }
;
L008F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ inputListener (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inputListener: near

.segment	"CODE"

;
; readInput();
;
	jsr     _readInput
;
; if ((inputStatus & JP1_START) != 0
;
	lda     _inputStatus
	and     #$10
;
; && pauseTransition == FALSE)
;
	beq     L021B
	lda     _pauseTransition
	cmp     #$01
	bne     L021B
;
; paused = (paused == TRUE)?FALSE:TRUE;
;
	lda     _paused
	bne     L0219
	lda     #$01
	jmp     L021A
L0219:	lda     #$00
L021A:	sta     _paused
;
; pauseTransition = TRUE;
;
	lda     #$00
	sta     _pauseTransition
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; if (paused == FALSE)
;
L021B:	lda     _paused
	cmp     #$01
	bne     L006D
;
; if ((inputStatus & JP1_LEFT) != 0)
;
	lda     _inputStatus
	and     #$02
	beq     L021C
;
; dirPaddle = W;
;
	lda     #$07
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NW;
;
	lda     _launched
	cmp     #$01
	bne     L021F
	lda     #$08
	sta     _dirBall
;
; else if ((inputStatus & JP1_RIGHT) != 0) //255-size of paddle
;
	jmp     L021F
L021C:	lda     _inputStatus
	and     #$01
	beq     L021E
;
; dirPaddle = E;
;
	lda     #$03
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NE;
;
	lda     _launched
	cmp     #$01
	bne     L021F
	lda     #$02
	sta     _dirBall
;
; else dirPaddle = NESW;
;
	jmp     L021F
L021E:	sta     _dirPaddle
;
; if ((inputStatus & JP1_A) != 0 && launched == FALSE)
;
L021F:	lda     _inputStatus
	and     #$80
	beq     L0221
	lda     _launched
	cmp     #$01
	beq     L0224
L0221:	rts
;
; launched = TRUE;
;
L0224:	lda     #$00
	sta     _launched
;
; }
;
L006D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spriteCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCollision: near

.segment	"CODE"

;
; if (xPaddle + 4 * 8 >= xBall && xPaddle <= xBall + 8
;
	ldx     #$00
	lda     _xPaddle
	clc
	adc     #$20
	bcc     L00AB
	inx
L00AB:	cmp     _xBall
	txa
	sbc     #$00
	bcc     L022D
	lda     _xPaddle
	jsr     pusha0
	lda     _xBall
;
; && yPaddle <= yBall + 8 &&  yPaddle + 8 >= yBall)
;
	clc
	adc     #$08
	bcc     L00AD
	ldx     #$01
L00AD:	jsr     tosicmp
	beq     L0227
	bcs     L022D
L0227:	lda     _yPaddle
	jsr     pusha0
	lda     _yBall
	clc
	adc     #$08
	bcc     L00AE
	ldx     #$01
L00AE:	jsr     tosicmp
	beq     L0228
	bcs     L022D
L0228:	ldx     #$00
	lda     _yPaddle
	clc
	adc     #$08
	bcc     L00AF
	inx
L00AF:	cmp     _yBall
	txa
	sbc     #$00
	bcc     L022D
;
; if (dirBall == SE) dirBall = NE;
;
	lda     _dirBall
	cmp     #$04
	bne     L022C
	lda     #$02
;
; else dirBall = NW;
;
	jmp     L0225
L022C:	lda     #$08
L0225:	sta     _dirBall
;
; switch (dirBall) {
;
L022D:	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L022E
	cmp     #$04
	beq     L0234
	cmp     #$06
	beq     L023A
	cmp     #$08
	beq     L023F
	rts
;
; if (xBall >= BALL_MAX_X && yBall <= 0) dirBall = SW;
;
L022E:	lda     _xBall
	cmp     #$F7
	bcc     L0232
	lda     _yBall
	bne     L0232
	lda     #$06
;
; else if (yBall <= 0) dirBall = SE;
;
	jmp     L0226
L0232:	lda     _yBall
	bne     L0233
	lda     #$04
;
; else if (xBall >= BALL_MAX_X) dirBall = NW;
;
	jmp     L0226
L0233:	lda     _xBall
	cmp     #$F7
	bcc     L00BA
	lda     #$08
;
; break;
;
	jmp     L0226
;
; if (xBall >= BALL_MAX_X && yBall >= BALL_MAX_Y) dirBall = NW;
;
L0234:	lda     _xBall
	cmp     #$F7
	bcc     L0238
	lda     _yBall
	cmp     #$E6
	bcc     L0238
	lda     #$08
;
; else if (yBall >= BALL_MAX_Y) dirBall = NE;
;
	jmp     L0226
L0238:	lda     _yBall
	cmp     #$E6
;
; else if (xBall >= BALL_MAX_X) dirBall = SW;
;
	bcs     L0244
	lda     _xBall
	cmp     #$F7
	bcc     L00BA
	lda     #$06
;
; break;
;
	jmp     L0226
;
; if (xBall <= 0 && yBall >= BALL_MAX_Y) dirBall = NE;
;
L023A:	lda     _xBall
	bne     L023D
	lda     _yBall
	cmp     #$E6
	bcs     L0244
;
; else if (yBall >= BALL_MAX_Y) dirBall = NW;
;
L023D:	lda     _yBall
	cmp     #$E6
	bcc     L023E
	lda     #$08
;
; else if (xBall <= 0) dirBall = SE;
;
	jmp     L0226
L023E:	lda     _xBall
	bne     L00BA
	lda     #$04
;
; break;
;
	jmp     L0226
;
; if (xBall <= 0 && yBall <= 0) dirBall = SE;
;
L023F:	lda     _xBall
	bne     L0242
	lda     _yBall
	bne     L0242
	lda     #$04
;
; else if (yBall <= 0) dirBall = SW;
;
	jmp     L0226
L0242:	lda     _yBall
	bne     L0243
	lda     #$06
;
; else if (xBall <= 0) dirBall = NE;
;
	jmp     L0226
L0243:	lda     _xBall
	bne     L00BA
L0244:	lda     #$02
L0226:	sta     _dirBall
;
; }
;
L00BA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ frameRoutine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_frameRoutine: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; OAM_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2003
;
; OAM_DMA_REGISTER = 2;
;
	lda     #$02
	sta     $4014
;
; resetScrollRegister();
;
	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ readInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readInput: near

.segment	"CODE"

;
; unsigned char test = 0;//TO DELETE
;
	lda     #$00
	jsr     pusha
;
; inputStatus = 0;
;
	sta     _inputStatus
;
; JOYPAD1_REGISTER = 1;
;
	lda     #$01
	sta     $4016
;
; JOYPAD1_REGISTER = 0;
;
	lda     #$00
	sta     $4016
;
; for (index = 8; index > 0; --index)
;
	lda     #$08
	sta     _index
L0245:	lda     _index
	beq     L014B
;
; test = (JOYPAD1_REGISTER & 1);
;
	lda     $4016
	and     #$01
	ldy     #$00
	sta     (sp),y
;
; inputStatus = inputStatus | (test << index-1);
;
	sta     ptr1
	lda     _index
	sec
	sbc     #$01
	tay
	lda     ptr1
L0246:	asl     a
	dey
	bpl     L0246
	ror     a
	ora     _inputStatus
	sta     _inputStatus
;
; for (index = 8; index > 0; --index)
;
	dec     _index
	jmp     L0245
;
; }
;
L014B:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ writeBackgroundToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBackgroundToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; PPU_ADDRESS_REGISTER= 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x20;
;
	sta     $2006
;
; for(index = 0; index < sizeof(TEXT); ++index)
;
	lda     #$00
	sta     _index
L0248:	lda     _index
	cmp     #$08
	bcs     L0249
;
; PPU_DATA_REGISTER = TEXT[index];
;
	ldy     _index
	lda     _TEXT,y
	sta     $2007
;
; for(index = 0; index < sizeof(TEXT); ++index)
;
	inc     _index
	jmp     L0248
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L0249:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x80;
;
	lda     #$80
	sta     $2006
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	lda     #$00
	sta     _index
L024A:	lda     _index
	cmp     #$08
	bcs     L024B
;
; PPU_DATA_REGISTER = TEXT[index];
;
	ldy     _index
	lda     _TEXT,y
	sta     $2007
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	inc     _index
	jmp     L024A
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L024B:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x90;
;
	lda     #$90
	sta     $2006
;
; for (index = 0; index < sizeof(PAUSE_TEXT); ++index)
;
	lda     #$00
	sta     _index
L024C:	lda     _index
	cmp     #$07
	bcs     L0194
;
; if (paused == FALSE) PPU_DATA_REGISTER = 0;
;
	lda     _paused
	cmp     #$01
	bne     L019C
	lda     #$00
;
; else PPU_DATA_REGISTER = PAUSE_TEXT[index];
;
	jmp     L0247
L019C:	ldy     _index
	lda     _PAUSE_TEXT,y
L0247:	sta     $2007
;
; for (index = 0; index < sizeof(PAUSE_TEXT); ++index)
;
	inc     _index
	jmp     L024C
;
; resetScrollRegister();
;
L0194:	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ writeSpritesToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeSpritesToPPU: near

.segment	"CODE"

;
; spriteIndex = 0;
;
	lda     #$00
	sta     _spriteIndex
;
; for (index = 0; index < 4; ++index)
;
	sta     _index
L024E:	lda     _index
	cmp     #$04
	bcs     L0107
;
; SPRITE_TABLE[spriteIndex] = yPaddle;
;
	ldy     _spriteIndex
	lda     _yPaddle
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = PADDLE[index];
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _spriteIndex
	bcc     L0115
	inx
L0115:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _PADDLE,y
	ldy     #$00
	sta     (ptr1),y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = 1 + ((index==3)?SPRITE_VERTICAL_FLIP:0);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _spriteIndex
	bcc     L011C
	inx
L011C:	sta     ptr1
	stx     ptr1+1
	lda     _index
	cmp     #$03
	bne     L024F
	lda     #$40
	jmp     L0122
L024F:	tya
L0122:	clc
	adc     #$01
	sta     (ptr1),y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = xPaddle + (index << 3);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _spriteIndex
	bcc     L0128
	inx
L0128:	sta     ptr1
	stx     ptr1+1
	lda     _index
	asl     a
	asl     a
	asl     a
	clc
	adc     _xPaddle
	sta     (ptr1),y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; for (index = 0; index < 4; ++index)
;
	inc     _index
	jmp     L024E
;
; SPRITE_TABLE[spriteIndex] = yBall;
;
L0107:	ldy     _spriteIndex
	lda     _yBall
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = 0;
;
	ldy     _spriteIndex
	lda     #$00
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = 3;
;
	ldy     _spriteIndex
	lda     #$03
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = xBall;
;
	ldy     _spriteIndex
	lda     _xBall
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOff: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK_REGISTER = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOn: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0x90;
;
	lda     #$90
	sta     $2000
;
; PPU_MASK_REGISTER = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER= 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x00;
;
	lda     #$00
	sta     $2006
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L0250:	lda     _index
	cmp     #$10
	bcs     L0251
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L0250
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
L0251:	lda     #$00
	sta     _index
L0252:	lda     _index
	cmp     #$10
	bcs     L0253
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L0252
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L0253:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0xda;
;
	lda     #$DA
	sta     $2006
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	lda     #$00
	sta     _index
L0254:	lda     _index
	cmp     #$04
	bcs     L01E0
;
; PPU_DATA_REGISTER = Attrib_Table[index];
;
	ldy     _index
	lda     _Attrib_Table,y
	sta     $2007
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	inc     _index
	jmp     L0254
;
; }
;
L01E0:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ resetScrollRegister (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetScrollRegister: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0;
;
	sta     $2006
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitVBlank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitVBlank: near

.segment	"CODE"

;
; while (NMIFlag == 0);
;
L0255:	lda     _NMIFlag
	beq     L0255
;
; NMIFlag = 0;
;
	lda     #$00
	sta     _NMIFlag
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; loadPalette();
;
	jsr     _loadPalette
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; waitVBlank();
;
	jsr     _waitVBlank
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; inputListener();
;
L0030:	jsr     _inputListener
;
; if (pauseTransition == TRUE && FrameCounter >= 120)
;
	lda     _pauseTransition
	bne     L0258
	lda     _FrameCounter
	cmp     #$78
	bcc     L0258
;
; pauseTransition = FALSE;
;
	lda     #$01
	sta     _pauseTransition
;
; if (paused == FALSE)
;
L0258:	lda     _paused
	cmp     #$01
	bne     L003B
;
; updatePos();
;
	jsr     _updatePos
;
; spriteCollision();
;
	jsr     _spriteCollision
;
; writeSpritesToPPU();
;
	jsr     _writeSpritesToPPU
;
; frameRoutine();
;
L003B:	jsr     _frameRoutine
;
; while (1)
;
	jmp     L0030

.endproc

