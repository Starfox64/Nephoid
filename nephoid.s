;
; File generated by cc65 v 2.16 - Git 035baa4
;
	.fopt		compiler,"cc65 v 2.16 - Git 035baa4"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMIFlag
	.export		_FrameCounter
	.export		_index
	.export		_index2
	.export		_X
	.export		_Y
	.export		_level
	.export		_xPaddle
	.export		_yPaddle
	.export		_dirPaddle
	.export		_speedPaddle
	.export		_xBall
	.export		_yBall
	.export		_dirBall
	.export		_speedBall
	.export		_inputStatus
	.export		_gameover
	.export		_playing
	.export		_launched
	.export		_paused
	.export		_pauseTransition
	.export		_PAUSE_STR
	.export		_GAME_OVER_STR
	.export		_WIN_STR
	.export		_LEVEL_STR
	.export		_PADDLE
	.export		_BRICKS_X
	.export		_BRICKS_Y
	.export		_HBYTE_ADDRESSES
	.export		_LBYTE_ADDRESSES
	.export		_LEVEL
	.export		_LEVEL_NB
	.export		_Attrib_Table
	.export		_PALETTE
	.export		_SPRITE_TABLE
	.export		_updatePos
	.export		_inputListener
	.export		_spriteCollision
	.export		_frameRoutine
	.export		_readInput
	.export		_writeBrickToPPU
	.export		_writeBackgroundToPPU
	.export		_writePauseToPPU
	.export		_writeGameOverToPPU
	.export		_writeWinToPPU
	.export		_writeSpritesToPPU
	.export		_turnScreenOff
	.export		_turnScreenOn
	.export		_loadPalette
	.export		_resetScrollRegister
	.export		_waitVBlank
	.export		_main

.segment	"DATA"

_gameover:
	.byte	$00
_LEVEL:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
_LEVEL_NB:
	.byte	$24
	.byte	$1C
	.byte	$22
	.byte	$22

.segment	"RODATA"

_PAUSE_STR:
	.byte	$50,$41,$55,$53,$45,$44,$00
_GAME_OVER_STR:
	.byte	$47,$41,$4D,$45,$20,$20,$4F,$56,$45,$52,$00
_WIN_STR:
	.byte	$59,$4F,$55,$20,$20,$57,$49,$4E,$00
_LEVEL_STR:
	.byte	$4C,$45,$56,$45,$4C,$20,$20,$00
_PADDLE:
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
_BRICKS_X:
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$60
	.byte	$80
	.byte	$A0
	.byte	$C0
	.byte	$E0
_BRICKS_Y:
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$68
	.byte	$68
	.byte	$68
	.byte	$68
	.byte	$68
	.byte	$68
	.byte	$68
	.byte	$68
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
_HBYTE_ADDRESSES:
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
_LBYTE_ADDRESSES:
	.byte	$20
	.byte	$24
	.byte	$28
	.byte	$2C
	.byte	$30
	.byte	$34
	.byte	$38
	.byte	$3C
	.byte	$60
	.byte	$64
	.byte	$68
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$A0
	.byte	$A4
	.byte	$A8
	.byte	$AC
	.byte	$B0
	.byte	$B4
	.byte	$B8
	.byte	$BC
	.byte	$E0
	.byte	$E4
	.byte	$E8
	.byte	$EC
	.byte	$F0
	.byte	$F4
	.byte	$F8
	.byte	$FC
	.byte	$20
	.byte	$24
	.byte	$28
	.byte	$2C
	.byte	$30
	.byte	$34
	.byte	$38
	.byte	$3C
	.byte	$60
	.byte	$64
	.byte	$68
	.byte	$6C
	.byte	$70
	.byte	$74
	.byte	$78
	.byte	$7C
	.byte	$A0
	.byte	$A4
	.byte	$A8
	.byte	$AC
	.byte	$B0
	.byte	$B4
	.byte	$B8
	.byte	$BC
	.byte	$E0
	.byte	$E4
	.byte	$E8
	.byte	$EC
	.byte	$F0
	.byte	$F4
	.byte	$F8
	.byte	$FC
_Attrib_Table:
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
_PALETTE:
	.byte	$2D
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$33
	.byte	$14
	.byte	$30
	.byte	$01
	.byte	$21
	.byte	$3C
	.byte	$30
	.byte	$37
	.byte	$14
	.byte	$2B

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"OAM"
.segment	"ZEROPAGE"
_NMIFlag:
	.res	1,$00
.segment	"ZEROPAGE"
_FrameCounter:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_index2:
	.res	1,$00
.segment	"ZEROPAGE"
_X:
	.res	1,$00
.segment	"ZEROPAGE"
_Y:
	.res	1,$00
.segment	"ZEROPAGE"
_level:
	.res	1,$00
.segment	"ZEROPAGE"
_xPaddle:
	.res	1,$00
.segment	"ZEROPAGE"
_yPaddle:
	.res	1,$00
.segment	"ZEROPAGE"
_dirPaddle:
	.res	1,$00
.segment	"ZEROPAGE"
_speedPaddle:
	.res	1,$00
.segment	"ZEROPAGE"
_xBall:
	.res	1,$00
.segment	"ZEROPAGE"
_yBall:
	.res	1,$00
.segment	"ZEROPAGE"
_dirBall:
	.res	1,$00
.segment	"ZEROPAGE"
_speedBall:
	.res	1,$00
.segment	"ZEROPAGE"
_inputStatus:
	.res	1,$00
.segment	"ZEROPAGE"
_playing:
	.res	1,$00
.segment	"ZEROPAGE"
_launched:
	.res	1,$00
.segment	"ZEROPAGE"
_paused:
	.res	1,$00
.segment	"ZEROPAGE"
_pauseTransition:
	.res	1,$00
.segment	"OAM"
_SPRITE_TABLE:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ updatePos (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatePos: near

.segment	"CODE"

;
; if (dirPaddle == E && xPaddle < 223) {
;
	lda     _dirPaddle
	cmp     #$03
	bne     L055C
	lda     _xPaddle
	cmp     #$DF
	bcs     L055C
;
; xPaddle += speedPaddle;
;
	lda     _speedPaddle
	clc
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall += speedPaddle;
;
	lda     _launched
	bne     L055F
	lda     _speedPaddle
	clc
;
; else if (dirPaddle == W && xPaddle > 0) {
;
	jmp     L0564
L055C:	lda     _dirPaddle
	cmp     #$07
	bne     L055F
	lda     _xPaddle
	beq     L055F
;
; xPaddle -= speedPaddle;
;
	lda     _speedPaddle
	eor     #$FF
	sec
	adc     _xPaddle
	sta     _xPaddle
;
; if (launched == FALSE) xBall -= speedPaddle;
;
	lda     _launched
	bne     L055F
	lda     _speedPaddle
	eor     #$FF
	sec
L0564:	adc     _xBall
	sta     _xBall
;
; if (launched == TRUE) {
;
L055F:	lda     _launched
	cmp     #$01
	bne     L02EF
;
; switch (dirBall) {
;
	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L0560
	cmp     #$04
	beq     L0561
	cmp     #$06
	beq     L0562
	cmp     #$08
	beq     L0563
	rts
;
; xBall += speedBall;
;
L0560:	lda     _speedBall
	clc
;
; break;
;
	jmp     L056A
;
; xBall += speedBall;
;
L0561:	lda     _speedBall
	clc
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L0565
;
; xBall -= speedBall;
;
L0562:	lda     _speedBall
	eor     #$FF
	sec
	adc     _xBall
	sta     _xBall
;
; yBall += speedBall;
;
	lda     _speedBall
	clc
;
; break;
;
	jmp     L0565
;
; xBall -= speedBall;
;
L0563:	lda     _speedBall
	eor     #$FF
	sec
L056A:	adc     _xBall
	sta     _xBall
;
; yBall -= speedBall;
;
	lda     _speedBall
	eor     #$FF
	sec
L0565:	adc     _yBall
	sta     _yBall
;
; }
;
L02EF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ inputListener (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inputListener: near

.segment	"CODE"

;
; readInput();
;
	jsr     _readInput
;
; if ((inputStatus & JP1_START) != 0
;
	lda     _inputStatus
	and     #$10
;
; && pauseTransition == FALSE)
;
	beq     L0570
	lda     _pauseTransition
	bne     L0570
;
; paused = (paused == TRUE)?FALSE:TRUE;
;
	lda     _paused
	cmp     #$01
	bne     L056E
	lda     #$00
	jmp     L056F
L056E:	lda     #$01
L056F:	sta     _paused
;
; pauseTransition = TRUE;
;
	lda     #$01
	sta     _pauseTransition
;
; FrameCounter = 0;
;
	lda     #$00
	sta     _FrameCounter
;
; writePauseToPPU();
;
	jsr     _writePauseToPPU
;
; if (paused == FALSE)
;
L0570:	lda     _paused
	bne     L02CD
;
; if ((inputStatus & JP1_LEFT) != 0)
;
	lda     _inputStatus
	and     #$02
	beq     L0571
;
; dirPaddle = W;
;
	lda     #$07
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NW;
;
	lda     _launched
	bne     L0574
	lda     #$08
	sta     _dirBall
;
; else if ((inputStatus & JP1_RIGHT) != 0) //255-size of paddle
;
	jmp     L0574
L0571:	lda     _inputStatus
	and     #$01
	beq     L0573
;
; dirPaddle = E;
;
	lda     #$03
	sta     _dirPaddle
;
; if (launched == FALSE) dirBall = NE;
;
	lda     _launched
	bne     L0574
	lda     #$02
	sta     _dirBall
;
; else dirPaddle = NESW;
;
	jmp     L0574
L0573:	sta     _dirPaddle
;
; if ((inputStatus & JP1_A) != 0 && launched == FALSE)
;
L0574:	lda     _inputStatus
	and     #$80
	beq     L0576
	lda     _launched
	beq     L0577
L0576:	rts
;
; launched = TRUE;
;
L0577:	lda     #$01
	sta     _launched
;
; }
;
L02CD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spriteCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spriteCollision: near

.segment	"CODE"

;
; if (xPaddle + 4 * 8 >= xBall && xPaddle <= xBall + 8
;
	ldx     #$00
	lda     _xPaddle
	clc
	adc     #$20
	bcc     L030B
	inx
L030B:	cmp     _xBall
	txa
	sbc     #$00
	bcc     L0584
	lda     _xPaddle
	jsr     pusha0
	lda     _xBall
;
; && yPaddle <= yBall + 8 &&  yPaddle + 8 >= yBall)
;
	clc
	adc     #$08
	bcc     L030D
	ldx     #$01
L030D:	jsr     tosicmp
	beq     L057D
	bcs     L0584
L057D:	lda     _yPaddle
	jsr     pusha0
	lda     _yBall
	clc
	adc     #$08
	bcc     L030E
	ldx     #$01
L030E:	jsr     tosicmp
	beq     L057E
	bcs     L0584
L057E:	ldx     #$00
	lda     _yPaddle
	clc
	adc     #$08
	bcc     L030F
	inx
L030F:	cmp     _yBall
	txa
	sbc     #$00
	bcc     L0584
;
; if (dirBall == SE) dirBall = NE;
;
	lda     _dirBall
	cmp     #$04
	bne     L0583
	lda     #$02
;
; else dirBall = NW;
;
	jmp     L057A
L0583:	lda     #$08
L057A:	sta     _dirBall
;
; switch (dirBall) {
;
L0584:	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L0585
	cmp     #$04
	beq     L058B
	cmp     #$06
	beq     L058D
	cmp     #$08
	beq     L058F
	jmp     L0594
;
; if (xBall >= BALL_MAX_X && yBall <= 8) dirBall = SW;
;
L0585:	lda     _xBall
	cmp     #$F7
	bcc     L0589
	lda     _yBall
	cmp     #$09
	bcs     L0589
	lda     #$06
;
; else if (yBall <= 8) dirBall = SE;
;
	jmp     L057B
L0589:	lda     _yBall
	cmp     #$09
	bcs     L058A
	lda     #$04
;
; else if (xBall >= BALL_MAX_X) dirBall = NW;
;
	jmp     L057B
L058A:	lda     _xBall
	cmp     #$F7
	lda     #$00
	bcc     L0595
	lda     #$08
;
; break;
;
	jmp     L057B
;
; if (yBall >= BALL_MAX_Y)
;
L058B:	lda     _yBall
	cmp     #$E6
	bcc     L058C
;
; playing = FALSE;
;
	lda     #$00
	sta     _playing
;
; gameover = TRUE;
;
	lda     #$01
	sta     _gameover
;
; writeGameOverToPPU();
;
	jsr     _writeGameOverToPPU
;
; else if (xBall >= BALL_MAX_X) dirBall = SW;
;
	jmp     L0594
L058C:	lda     _xBall
	cmp     #$F7
	lda     #$00
	bcc     L0595
	lda     #$06
;
; break;
;
	jmp     L057B
;
; if (yBall >= BALL_MAX_Y)
;
L058D:	lda     _yBall
	cmp     #$E6
	bcc     L058E
;
; playing = FALSE;
;
	lda     #$00
	sta     _playing
;
; gameover = TRUE;
;
	lda     #$01
	sta     _gameover
;
; writeGameOverToPPU();
;
	jsr     _writeGameOverToPPU
;
; else if (xBall <= 0) dirBall = SE;
;
	jmp     L0594
L058E:	lda     _xBall
	bne     L0594
	lda     #$04
;
; break;
;
	jmp     L057B
;
; if (xBall <= 0 && yBall <= 8) dirBall = SE;
;
L058F:	lda     _xBall
	bne     L0592
	lda     _yBall
	cmp     #$09
	bcs     L0592
	lda     #$04
;
; else if (yBall <= 8) dirBall = SW;
;
	jmp     L057B
L0592:	lda     _yBall
	cmp     #$09
	bcs     L0593
	lda     #$06
;
; else if (xBall <= 0) dirBall = NE;
;
	jmp     L057B
L0593:	lda     _xBall
	bne     L0594
	lda     #$02
L057B:	sta     _dirBall
;
; for (index = 0; index < sizeof(LEVEL[level]); ++index)
;
L0594:	lda     #$00
L0595:	sta     _index
L0596:	lda     _index
	cmp     #$40
	bcc     L05A0
;
; }
;
	rts
;
; if (LEVEL[level][index] == FALSE)
;
L05A0:	ldx     #$00
	lda     _level
	jsr     aslax4
	jsr     aslax2
	clc
	adc     #<(_LEVEL)
	sta     ptr1
	txa
	adc     #>(_LEVEL)
	sta     ptr1+1
	ldy     _index
	lda     (ptr1),y
	jne     L059F
;
; if (xBall <= BRICKS_X[index] + 32 && xBall + 8 >= BRICKS_X[index]
;
	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L036D
	ldx     #$01
L036D:	jsr     tosicmp
	beq     L057F
	jcs     L059F
L057F:	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L036F
	inx
L036F:	jsr     pushax
	ldy     _index
	lda     _BRICKS_X,y
;
; && yBall < BRICKS_Y[index] + 16 && yBall + 8 >= BRICKS_Y[index])
;
	jsr     tosicmp0
	jcc     L059F
	lda     _yBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_Y,y
	clc
	adc     #$10
	bcc     L0374
	ldx     #$01
L0374:	jsr     tosicmp
	jcs     L059F
	ldx     #$00
	lda     _yBall
	clc
	adc     #$08
	bcc     L0375
	inx
L0375:	jsr     pushax
	ldy     _index
	lda     _BRICKS_Y,y
	jsr     tosicmp0
	jcc     L059F
;
; LEVEL[level][index] = TRUE;
;
	ldx     #$00
	lda     _level
	jsr     aslax4
	jsr     aslax2
	clc
	adc     #<(_LEVEL)
	tay
	txa
	adc     #>(_LEVEL)
	tax
	tya
	clc
	adc     _index
	bcc     L0579
	inx
L0579:	sta     ptr1
	stx     ptr1+1
	lda     #$01
	ldy     #$00
	sta     (ptr1),y
;
; switch (dirBall)
;
	lda     _dirBall
;
; }
;
	cmp     #$02
	beq     L0597
	cmp     #$04
	beq     L0599
	cmp     #$06
	beq     L059B
	cmp     #$08
	jeq     L059D
	jmp     L037F
;
; if (xBall < BRICKS_X[index] && xBall + 8 >= BRICKS_X[index]) dirBall = NW;
;
L0597:	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	jsr     tosicmp0
	bcs     L0598
	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L0387
	inx
L0387:	jsr     pushax
	ldy     _index
	lda     _BRICKS_X,y
	jsr     tosicmp0
	bcc     L0598
	lda     #$08
;
; else dirBall = SE;
;
	jmp     L057C
L0598:	lda     #$04
;
; break;
;
	jmp     L057C
;
; if (xBall < BRICKS_X[index] && xBall + 8 >= BRICKS_X[index]) dirBall = SW;
;
L0599:	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	jsr     tosicmp0
	bcs     L059A
	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L0397
	inx
L0397:	jsr     pushax
	ldy     _index
	lda     _BRICKS_X,y
	jsr     tosicmp0
	jcs     L059E
;
; else dirBall = NE;
;
L059A:	lda     #$02
;
; break;
;
	jmp     L057C
;
; if (xBall < BRICKS_X[index] + 32 && xBall + 8 >= BRICKS_X[index] + 32) dirBall = SE;
;
L059B:	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L03A6
	ldx     #$01
L03A6:	jsr     tosicmp
	bcs     L059C
	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L03A8
	inx
L03A8:	jsr     pushax
	ldy     _index
	ldx     #$00
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L03AB
	inx
L03AB:	jsr     tosicmp
	bcc     L059C
	lda     #$04
;
; else dirBall = NW;
;
	jmp     L057C
L059C:	lda     #$08
;
; break;
;
	jmp     L057C
;
; if (xBall < BRICKS_X[index] + 32 && xBall + 8 >= BRICKS_X[index] + 32) dirBall = NE;
;
L059D:	lda     _xBall
	jsr     pusha0
	ldy     _index
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L03B8
	ldx     #$01
L03B8:	jsr     tosicmp
	bcs     L059E
	ldx     #$00
	lda     _xBall
	clc
	adc     #$08
	bcc     L03BA
	inx
L03BA:	jsr     pushax
	ldy     _index
	ldx     #$00
	lda     _BRICKS_X,y
	clc
	adc     #$20
	bcc     L03BD
	inx
L03BD:	jsr     tosicmp
	bcc     L059E
	lda     #$02
;
; else dirBall = SW;
;
	jmp     L057C
L059E:	lda     #$06
L057C:	sta     _dirBall
;
; X = HBYTE_ADDRESSES[index];
;
L037F:	ldy     _index
	lda     _HBYTE_ADDRESSES,y
	sta     _X
;
; Y = LBYTE_ADDRESSES[index];
;
	ldy     _index
	lda     _LBYTE_ADDRESSES,y
	sta     _Y
;
; waitVBlank();
;
	jsr     _waitVBlank
;
; writeBrickToPPU();
;
	jsr     _writeBrickToPPU
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; --LEVEL_NB[level];
;
	lda     #<(_LEVEL_NB)
	ldx     #>(_LEVEL_NB)
	clc
	adc     _level
	bcc     L03D1
	inx
L03D1:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (LEVEL_NB[level] == 0) {playing = FALSE;}
;
	ldy     _level
	lda     _LEVEL_NB,y
	bne     L035C
	sta     _playing
;
; break;
;
	rts
;
; for (index = 0; index < sizeof(LEVEL[level]); ++index)
;
L059F:	inc     _index
	jmp     L0596
;
; }
;
L035C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ frameRoutine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_frameRoutine: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; OAM_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2003
;
; OAM_DMA_REGISTER = 2;
;
	lda     #$02
	sta     $4014
;
; resetScrollRegister();
;
	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ readInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readInput: near

.segment	"CODE"

;
; inputStatus = 0;
;
	lda     #$00
	sta     _inputStatus
;
; JOYPAD1_REGISTER = 1;
;
	lda     #$01
	sta     $4016
;
; JOYPAD1_REGISTER = 0;
;
	lda     #$00
	sta     $4016
;
; for (index = 8; index > 0; --index)
;
	lda     #$08
	sta     _index
L05A1:	lda     _index
	beq     L0420
;
; inputStatus = inputStatus | ((JOYPAD1_REGISTER & 1) << index-1);
;
	lda     $4016
	and     #$01
	sta     ptr1
	lda     _index
	sec
	sbc     #$01
	tay
	lda     ptr1
L05A2:	asl     a
	dey
	bpl     L05A2
	ror     a
	ora     _inputStatus
	sta     _inputStatus
;
; for (index = 8; index > 0; --index)
;
	dec     _index
	jmp     L05A1
;
; }
;
L0420:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ writeBrickToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBrickToPPU: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER = X;
;
	lda     _X
	sta     $2006
;
; PPU_ADDRESS_REGISTER = Y;
;
	lda     _Y
	sta     $2006
;
; if (LEVEL[level][index] == FALSE)
;
	ldx     #$00
	lda     _level
	jsr     aslax4
	jsr     aslax2
	clc
	adc     #<(_LEVEL)
	sta     ptr1
	txa
	adc     #>(_LEVEL)
	sta     ptr1+1
	ldy     _index
	lda     (ptr1),y
	bne     L05A7
;
; PPU_DATA_REGISTER = 0x80;
;
	lda     #$80
	sta     $2007
;
; PPU_DATA_REGISTER = 0x81;
;
	lda     #$81
	sta     $2007
;
; PPU_DATA_REGISTER = 0x81;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x82;
;
	lda     #$82
;
; else
;
	jmp     L05A5
;
; PPU_DATA_REGISTER = 0x83;
;
L05A7:	lda     #$83
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
L05A5:	sta     $2007
;
; Y += 32;
;
	lda     #$20
	clc
	adc     _Y
	sta     _Y
;
; if (Y < 32) ++X;
;
	cmp     #$20
	bcs     L05A8
	inc     _X
;
; PPU_ADDRESS_REGISTER = X;
;
L05A8:	lda     _X
	sta     $2006
;
; PPU_ADDRESS_REGISTER = Y;
;
	lda     _Y
	sta     $2006
;
; if (LEVEL[level][index] == FALSE)
;
	ldx     #$00
	lda     _level
	jsr     aslax4
	jsr     aslax2
	clc
	adc     #<(_LEVEL)
	sta     ptr1
	txa
	adc     #>(_LEVEL)
	sta     ptr1+1
	ldy     _index
	lda     (ptr1),y
	bne     L05A9
;
; PPU_DATA_REGISTER = 0x90;
;
	lda     #$90
	sta     $2007
;
; PPU_DATA_REGISTER = 0x91;
;
	lda     #$91
	sta     $2007
;
; PPU_DATA_REGISTER = 0x91;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x92;
;
	lda     #$92
;
; else
;
	jmp     L05A6
;
; PPU_DATA_REGISTER = 0x83;
;
L05A9:	lda     #$83
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
	sta     $2007
;
; PPU_DATA_REGISTER = 0x83;
;
L05A6:	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ writeBackgroundToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBackgroundToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; for (index = 0; index < sizeof(LEVEL[level]); ++index)
;
	lda     #$00
	sta     _index
L05AA:	lda     _index
	cmp     #$40
	bcs     L05AB
;
; X = HBYTE_ADDRESSES[index];
;
	ldy     _index
	lda     _HBYTE_ADDRESSES,y
	sta     _X
;
; Y = LBYTE_ADDRESSES[index];
;
	ldy     _index
	lda     _LBYTE_ADDRESSES,y
	sta     _Y
;
; writeBrickToPPU();
;
	jsr     _writeBrickToPPU
;
; for (index = 0; index < sizeof(LEVEL[level]); ++index)
;
	inc     _index
	jmp     L05AA
;
; PPU_ADDRESS_REGISTER = 0x22;
;
L05AB:	lda     #$22
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x8C;
;
	lda     #$8C
	sta     $2006
;
; for (index = 0; index < sizeof(LEVEL_STR); ++index)
;
	lda     #$00
	sta     _index
L05AC:	lda     _index
	cmp     #$08
	bcs     L05AD
;
; PPU_DATA_REGISTER = LEVEL_STR[index];
;
	ldy     _index
	lda     _LEVEL_STR,y
	sta     $2007
;
; for (index = 0; index < sizeof(LEVEL_STR); ++index)
;
	inc     _index
	jmp     L05AC
;
; PPU_DATA_REGISTER = level + '1';
;
L05AD:	lda     _level
	clc
	adc     #$31
	sta     $2007
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; waitVBlank();
;
	jmp     _waitVBlank

.endproc

; ---------------------------------------------------------------
; void __near__ writePauseToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writePauseToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; PPU_ADDRESS_REGISTER = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x8D;
;
	lda     #$8D
	sta     $2006
;
; for (index = 0; index < sizeof(PAUSE_STR); ++index)
;
	lda     #$00
	sta     _index
L05AF:	lda     _index
	cmp     #$07
	bcs     L04B9
;
; if (paused == FALSE) PPU_DATA_REGISTER = 0;
;
	lda     _paused
;
; else PPU_DATA_REGISTER = PAUSE_STR[index];
;
	beq     L05AE
	ldy     _index
	lda     _PAUSE_STR,y
L05AE:	sta     $2007
;
; for (index = 0; index < sizeof(PAUSE_STR); ++index)
;
	inc     _index
	jmp     L05AF
;
; resetScrollRegister();
;
L04B9:	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ writeGameOverToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeGameOverToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; PPU_ADDRESS_REGISTER = 0x22;
;
	lda     #$22
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x8B;
;
	lda     #$8B
	sta     $2006
;
; for (index = 0; index < sizeof(GAME_OVER_STR); ++index)
;
	lda     #$00
	sta     _index
L05B0:	lda     _index
	cmp     #$0B
	bcs     L048B
;
; PPU_DATA_REGISTER = GAME_OVER_STR[index];
;
	ldy     _index
	lda     _GAME_OVER_STR,y
	sta     $2007
;
; for (index = 0; index < sizeof(GAME_OVER_STR); ++index)
;
	inc     _index
	jmp     L05B0
;
; resetScrollRegister();
;
L048B:	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ writeWinToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeWinToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; PPU_ADDRESS_REGISTER = 0x22;
;
	lda     #$22
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x8C;
;
	lda     #$8C
	sta     $2006
;
; for (index = 0; index < sizeof(WIN_STR); ++index)
;
	lda     #$00
	sta     _index
L05B1:	lda     _index
	cmp     #$09
	bcs     L04A2
;
; PPU_DATA_REGISTER = WIN_STR[index];
;
	ldy     _index
	lda     _WIN_STR,y
	sta     $2007
;
; for (index = 0; index < sizeof(WIN_STR); ++index)
;
	inc     _index
	jmp     L05B1
;
; resetScrollRegister();
;
L04A2:	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ writeSpritesToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeSpritesToPPU: near

.segment	"CODE"

;
; index2 = 0;
;
	lda     #$00
	sta     _index2
;
; for (index = 0; index < sizeof(PADDLE); ++index)
;
	sta     _index
L05B3:	lda     _index
	cmp     #$04
	bcs     L03DC
;
; SPRITE_TABLE[index2] = yPaddle;
;
	ldy     _index2
	lda     _yPaddle
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = PADDLE[index];
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _index2
	bcc     L03EB
	inx
L03EB:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _PADDLE,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = 1 + ((index==3)?SPRITE_VERTICAL_FLIP:0);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _index2
	bcc     L03F2
	inx
L03F2:	sta     ptr1
	stx     ptr1+1
	lda     _index
	cmp     #$03
	bne     L05B4
	lda     #$40
	jmp     L03F8
L05B4:	tya
L03F8:	clc
	adc     #$01
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = xPaddle + (index << 3);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _index2
	bcc     L03FE
	inx
L03FE:	sta     ptr1
	stx     ptr1+1
	lda     _index
	asl     a
	asl     a
	asl     a
	clc
	adc     _xPaddle
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; for (index = 0; index < sizeof(PADDLE); ++index)
;
	inc     _index
	jmp     L05B3
;
; SPRITE_TABLE[index2] = yBall;
;
L03DC:	ldy     _index2
	lda     _yBall
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = 0;
;
	ldy     _index2
	lda     #$00
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = 3;
;
	ldy     _index2
	lda     #$03
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; SPRITE_TABLE[index2] = xBall;
;
	ldy     _index2
	lda     _xBall
	sta     _SPRITE_TABLE,y
;
; ++index2;
;
	inc     _index2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOff: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK_REGISTER = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOn: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0x90;
;
	lda     #$90
	sta     $2000
;
; PPU_MASK_REGISTER = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER= 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x00;
;
	lda     #$00
	sta     $2006
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L05B5:	lda     _index
	cmp     #$10
	bcs     L05B6
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L05B5
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
L05B6:	lda     #$00
	sta     _index
L05B7:	lda     _index
	cmp     #$10
	bcs     L05B8
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L05B7
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L05B8:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	lda     #$00
	sta     _index
L05B9:	lda     _index
	cmp     #$40
	bcs     L0537
;
; PPU_DATA_REGISTER = Attrib_Table[index];
;
	ldy     _index
	lda     _Attrib_Table,y
	sta     $2007
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	inc     _index
	jmp     L05B9
;
; }
;
L0537:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ resetScrollRegister (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetScrollRegister: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0;
;
	sta     $2006
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitVBlank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitVBlank: near

.segment	"CODE"

;
; while (NMIFlag == 0);
;
L05BA:	lda     _NMIFlag
	beq     L05BA
;
; NMIFlag = 0;
;
	lda     #$00
	sta     _NMIFlag
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; loadPalette();
;
	jsr     _loadPalette
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; for (level = 0; level < sizeof(LEVEL_NB); ++level)
;
	lda     #$00
	sta     _level
L05BB:	lda     _level
	cmp     #$04
	bcs     L05BF
;
; xPaddle = 0x0;
;
	lda     #$00
	sta     _xPaddle
;
; yPaddle = 0xD0;
;
	lda     #$D0
	sta     _yPaddle
;
; dirPaddle = E;
;
	lda     #$03
	sta     _dirPaddle
;
; speedPaddle = 4;
;
	lda     #$04
	sta     _speedPaddle
;
; xBall = 0x0C;
;
	lda     #$0C
	sta     _xBall
;
; yBall = 0xC8;
;
	lda     #$C8
	sta     _yBall
;
; dirBall = E;
;
	lda     #$03
	sta     _dirBall
;
; speedBall = 2;
;
	lda     #$02
	sta     _speedBall
;
; playing = TRUE;
;
	lda     #$01
	sta     _playing
;
; launched = FALSE;
;
	lda     #$00
	sta     _launched
;
; paused = FALSE;
;
	sta     _paused
;
; pauseTransition = FALSE;
;
	sta     _pauseTransition
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; while (playing)
;
	jmp     L028B
;
; inputListener();
;
L0289:	jsr     _inputListener
;
; if (pauseTransition == TRUE && FrameCounter >= 30)
;
	lda     _pauseTransition
	cmp     #$01
	bne     L05BE
	lda     _FrameCounter
	cmp     #$1E
	bcc     L05BE
;
; pauseTransition = FALSE;
;
	lda     #$00
	sta     _pauseTransition
;
; if (paused == FALSE)
;
L05BE:	lda     _paused
	bne     L0294
;
; updatePos();
;
	jsr     _updatePos
;
; spriteCollision();
;
	jsr     _spriteCollision
;
; writeSpritesToPPU();
;
	jsr     _writeSpritesToPPU
;
; frameRoutine();
;
L0294:	jsr     _frameRoutine
;
; while (playing)
;
L028B:	lda     _playing
	bne     L0289
;
; if (gameover) break;
;
	lda     _gameover
	bne     L05BF
;
; for (level = 0; level < sizeof(LEVEL_NB); ++level)
;
	inc     _level
	jmp     L05BB
;
; if (gameover == FALSE) writeWinToPPU();
;
L05BF:	lda     _gameover
	cmp     #$00
	jeq     _writeWinToPPU
;
; }
;
	rts

.endproc

