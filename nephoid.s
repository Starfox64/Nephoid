;
; File generated by cc65 v 2.16 - Git 035baa4
;
	.fopt		compiler,"cc65 v 2.16 - Git 035baa4"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMIFlag
	.export		_index
	.export		_spriteIndex
	.export		_xBall
	.export		_yBall
	.export		_xPaddle
	.export		_yPaddle
	.export		_inputStatus
	.export		_TEXT
	.export		_PADDLE
	.export		_PALETTE
	.export		_Attrib_Table
	.export		_SPRITE_TABLE
	.export		_writeSpritesToPPU
	.export		_frameRoutine
	.export		_readInput
	.export		_writeBackgroundToPPU
	.export		_turnScreenOff
	.export		_turnScreenOn
	.export		_loadPalette
	.export		_resetScrollRegister
	.export		_waitVBlank
	.export		_main

.segment	"DATA"

_xBall:
	.byte	$25
_yBall:
	.byte	$25
_xPaddle:
	.byte	$00
_yPaddle:
	.byte	$B0

.segment	"RODATA"

_TEXT:
	.byte	$4E,$45,$50,$48,$4F,$49,$44,$00
_PADDLE:
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
_PALETTE:
	.byte	$30
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$30
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$30
	.byte	$17
	.byte	$27
	.byte	$28
_Attrib_Table:
	.byte	$44
	.byte	$BB
	.byte	$44
	.byte	$BB

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"OAM"
.segment	"ZEROPAGE"
_NMIFlag:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_spriteIndex:
	.res	1,$00
.segment	"ZEROPAGE"
_inputStatus:
	.res	1,$00
.segment	"OAM"
_SPRITE_TABLE:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ writeSpritesToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeSpritesToPPU: near

.segment	"CODE"

;
; spriteIndex = 0;
;
	lda     #$00
	sta     _spriteIndex
;
; for (index = 0; index < 4; ++index)
;
	sta     _index
L0113:	lda     _index
	cmp     #$04
	bcs     L0114
;
; SPRITE_TABLE[spriteIndex] = yPaddle;
;
	ldy     _spriteIndex
	lda     _yPaddle
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = PADDLE[index];
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _spriteIndex
	bcc     L004A
	inx
L004A:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _PADDLE,y
	ldy     #$00
	sta     (ptr1),y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = 1 + SPRITE_VERTICAL_FLIP;
;
	ldy     _spriteIndex
	lda     #$41
	sta     _SPRITE_TABLE,y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; SPRITE_TABLE[spriteIndex] = xPaddle + (index << 3);
;
	lda     #<(_SPRITE_TABLE)
	ldx     #>(_SPRITE_TABLE)
	clc
	adc     _spriteIndex
	bcc     L0056
	inx
L0056:	sta     ptr1
	stx     ptr1+1
	lda     _index
	asl     a
	asl     a
	asl     a
	clc
	adc     _xPaddle
	ldy     #$00
	sta     (ptr1),y
;
; ++spriteIndex;
;
	inc     _spriteIndex
;
; for (index = 0; index < 4; ++index)
;
	inc     _index
	jmp     L0113
;
; index = 16;
;
L0114:	lda     #$10
	sta     _index
;
; SPRITE_TABLE[index] = yBall;
;
	ldy     _index
	lda     _yBall
	sta     _SPRITE_TABLE,y
;
; ++index;
;
	inc     _index
;
; SPRITE_TABLE[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _SPRITE_TABLE,y
;
; ++index;
;
	inc     _index
;
; SPRITE_TABLE[index] = 3;
;
	ldy     _index
	lda     #$03
	sta     _SPRITE_TABLE,y
;
; ++index;
;
	inc     _index
;
; SPRITE_TABLE[3] = xBall;
;
	lda     _xBall
	sta     _SPRITE_TABLE+3
;
; ++index;
;
	inc     _index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ frameRoutine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_frameRoutine: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; OAM_ADDRESS_REGISTER = 0;
;
	lda     #$00
	sta     $2003
;
; OAM_DMA_REGISTER = 2;
;
	lda     #$02
	sta     $4014
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; inputStatus = 0;
;
	lda     #$00
	sta     _inputStatus
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ readInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readInput: near

.segment	"CODE"

;
; JOYPAD1_REGISTER = 1;
;
	lda     #$01
	sta     $4016
;
; JOYPAD1_REGISTER = 0;
;
	lda     #$00
	sta     $4016
;
; for (index = 8; index > 0; --index)
;
	lda     #$08
	sta     _index
L0115:	lda     _index
	beq     L0077
;
; inputStatus = inputStatus | (JOYPAD1_REGISTER << index-1);
;
	sec
	sbc     #$01
	tay
	lda     $4016
L0116:	asl     a
	dey
	bpl     L0116
	ror     a
	ora     _inputStatus
	sta     _inputStatus
;
; for (index = 8; index > 0; --index)
;
	dec     _index
	jmp     L0115
;
; }
;
L0077:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ writeBackgroundToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBackgroundToPPU: near

.segment	"CODE"

;
; waitVBlank();
;
	jsr     _waitVBlank
;
; PPU_ADDRESS_REGISTER= 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x20;
;
	sta     $2006
;
; for(index = 0; index < sizeof(TEXT); ++index)
;
	lda     #$00
	sta     _index
L0117:	lda     _index
	cmp     #$08
	bcs     L0118
;
; PPU_DATA_REGISTER = TEXT[index];
;
	ldy     _index
	lda     _TEXT,y
	sta     $2007
;
; for(index = 0; index < sizeof(TEXT); ++index)
;
	inc     _index
	jmp     L0117
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L0118:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0x80;
;
	lda     #$80
	sta     $2006
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	lda     #$00
	sta     _index
L0119:	lda     _index
	cmp     #$08
	bcs     L00AB
;
; PPU_DATA_REGISTER = TEXT[index];
;
	ldy     _index
	lda     _TEXT,y
	sta     $2007
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	inc     _index
	jmp     L0119
;
; resetScrollRegister();
;
L00AB:	jmp     _resetScrollRegister

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOff: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK_REGISTER = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ turnScreenOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_turnScreenOn: near

.segment	"CODE"

;
; PPU_CTRL_REGISTER = 0x90;
;
	lda     #$90
	sta     $2000
;
; PPU_MASK_REGISTER = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER= 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0x00;
;
	lda     #$00
	sta     $2006
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L011A:	lda     _index
	cmp     #$10
	bcs     L011B
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L011A
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
L011B:	lda     #$00
	sta     _index
L011C:	lda     _index
	cmp     #$10
	bcs     L011D
;
; PPU_DATA_REGISTER = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L011C
;
; PPU_ADDRESS_REGISTER = 0x23;
;
L011D:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS_REGISTER = 0xda;
;
	lda     #$DA
	sta     $2006
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	lda     #$00
	sta     _index
L011E:	lda     _index
	cmp     #$04
	bcs     L00F1
;
; PPU_DATA_REGISTER = Attrib_Table[index];
;
	ldy     _index
	lda     _Attrib_Table,y
	sta     $2007
;
; for( index = 0; index < sizeof(Attrib_Table); ++index )
;
	inc     _index
	jmp     L011E
;
; }
;
L00F1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ resetScrollRegister (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetScrollRegister: near

.segment	"CODE"

;
; PPU_ADDRESS_REGISTER= 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS_REGISTER= 0;
;
	sta     $2006
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; SCROLL_REGISTER = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitVBlank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitVBlank: near

.segment	"CODE"

;
; while (NMIFlag == 0);
;
L011F:	lda     _NMIFlag
	beq     L011F
;
; NMIFlag = 0;
;
	lda     #$00
	sta     _NMIFlag
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; turnScreenOff();
;
	jsr     _turnScreenOff
;
; loadPalette();
;
	jsr     _loadPalette
;
; resetScrollRegister();
;
	jsr     _resetScrollRegister
;
; turnScreenOn();
;
	jsr     _turnScreenOn
;
; writeBackgroundToPPU();
;
	jsr     _writeBackgroundToPPU
;
; frameRoutine();
;
L0027:	jsr     _frameRoutine
;
; readInput();
;
	jsr     _readInput
;
; if ((inputStatus & JP1_LEFT) != 0) --xPaddle;
;
	lda     _inputStatus
	and     #$02
	beq     L0120
	dec     _xPaddle
;
; if ((inputStatus & JP1_RIGHT) != 0) ++xPaddle;
;
L0120:	lda     _inputStatus
	and     #$01
	beq     L0032
	inc     _xPaddle
;
; writeSpritesToPPU();
;
L0032:	jsr     _writeSpritesToPPU
;
; while (1)
;
	jmp     L0027

.endproc

